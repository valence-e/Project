!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDERTREE_H_	AdderTree.h	40;"	d
ADDER_H_	Adder.h	40;"	d
ALLOBJ	makefile	/^ALLOBJ := $(ALLSRC:.cpp=.o)$/;"	m
ALLSRC	makefile	/^ALLSRC := $(wildcard *.cpp)$/;"	m
AR	Bus.h	/^	double AR, Rho, unitLengthWireResistance, minDist, minDelay, resOnRep;$/;"	m	class:Bus
AR	HTree.h	/^	double numStage, numTree, AR, Rho, unitLengthWireResistance, minDist, minDelay, resOnRep;$/;"	m	class:HTree
AR	Param.h	/^	double AR, Rho, wireLengthRow, wireLengthCol, unitLengthWireResistance, wireResistanceRow, wireResistanceCol;$/;"	m	class:Param
AVG_RATIO_LEAK_2INPUT_NAND	constant.h	69;"	d
AVG_RATIO_LEAK_2INPUT_NOR	constant.h	71;"	d
AVG_RATIO_LEAK_3INPUT_NAND	constant.h	70;"	d
AVG_RATIO_LEAK_3INPUT_NOR	constant.h	72;"	d
Adder	Adder.cpp	/^Adder::Adder(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:Adder
Adder	Adder.h	/^class Adder: public FunctionUnit {$/;"	c
AdderTree	AdderTree.cpp	/^AdderTree::AdderTree(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), adder(_inputParameter, _tech, _cell), FunctionUnit() {$/;"	f	class:AdderTree
AdderTree	AdderTree.h	/^class AdderTree: public FunctionUnit {$/;"	c
AreaModify	typedef.h	/^enum AreaModify$/;"	g
BITSHIFTER_H_	BitShifter.h	40;"	d
BJT_access	typedef.h	/^	BJT_access,$/;"	e	enum:CellAccessType
BNNparallelMode	Param.h	/^	int XNORparallelMode, XNORsequentialMode, BNNparallelMode, BNNsequentialMode, conventionalParallel, conventionalSequential; $/;"	m	class:Param
BNNparallelMode	SubArray.h	/^	bool BNNparallelMode;      $/;"	m	class:SubArray
BNNsequentialMode	Param.h	/^	int XNORparallelMode, XNORsequentialMode, BNNparallelMode, BNNsequentialMode, conventionalParallel, conventionalSequential; $/;"	m	class:Param
BNNsequentialMode	SubArray.h	/^	bool BNNsequentialMode;     $/;"	m	class:SubArray
BUFFER_H_	Buffer.h	40;"	d
BUS_H_	Bus.h	40;"	d
BitShifter	BitShifter.cpp	/^BitShifter::BitShifter(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), dff(_inputParameter, _tech, _cell), FunctionUnit() {$/;"	f	class:BitShifter
BitShifter	BitShifter.h	/^class BitShifter: public FunctionUnit {$/;"	c
Buffer	Buffer.cpp	/^Buffer::Buffer(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), $/;"	f	class:Buffer
Buffer	Buffer.h	/^class Buffer: public FunctionUnit {$/;"	c
Bus	Bus.cpp	/^Bus::Bus(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:Bus
Bus	Bus.h	/^class Bus: public FunctionUnit {$/;"	c
BusMode	typedef.h	/^enum BusMode$/;"	g
CHIP_H_	Chip.h	40;"	d
CMOS	typedef.h	/^	CMOS,		\/* Normal read circuit *\/$/;"	e	enum:ReadCircuitMode
CMOS_access	typedef.h	/^	CMOS_access,$/;"	e	enum:CellAccessType
COL_MODE	constant.h	88;"	d
COMPARATOR_H_	Comparator.h	40;"	d
CONSTANT_H_	constant.h	40;"	d
CONTACT_SIZE	constant.h	60;"	d
CURRENTSENSEAMP_H_	CurrentSenseAmp.h	41;"	d
CXX	makefile	/^CXX := g++$/;"	m
CXXFLAGS	makefile	/^CXXFLAGS := -fopenmp -O3 -std=c++0x -w	# -w disables warnings$/;"	m
CalculateArea	Adder.cpp	/^void Adder::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:Adder
CalculateArea	AdderTree.cpp	/^void AdderTree::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:AdderTree
CalculateArea	BitShifter.cpp	/^void BitShifter::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:BitShifter
CalculateArea	Buffer.cpp	/^void Buffer::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:Buffer
CalculateArea	Bus.cpp	/^void Bus::CalculateArea(double foldedratio, bool overLap) {$/;"	f	class:Bus
CalculateArea	Comparator.cpp	/^void Comparator::CalculateArea(double widthArray){$/;"	f	class:Comparator
CalculateArea	CurrentSenseAmp.cpp	/^void CurrentSenseAmp::CalculateArea(double widthArray) {	\/\/ adjust CurrentSenseAmp area by fixing S\/A width$/;"	f	class:CurrentSenseAmp
CalculateArea	DFF.cpp	/^void DFF::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:DFF
CalculateArea	DeMux.cpp	/^void DeMux::CalculateArea(double _newHeight, double _newWidth, AreaModify _option){$/;"	f	class:DeMux
CalculateArea	DecoderDriver.cpp	/^void DecoderDriver::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:DecoderDriver
CalculateArea	HTree.cpp	/^void HTree::CalculateArea(double unitHeight, double unitWidth, double foldedratio) {$/;"	f	class:HTree
CalculateArea	LevelShifter.cpp	/^void LevelShifter::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:LevelShifter
CalculateArea	MaxPooling.cpp	/^void MaxPooling::CalculateArea(double widthArray){$/;"	f	class:MaxPooling
CalculateArea	MultilevelSAEncoder.cpp	/^void MultilevelSAEncoder::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:MultilevelSAEncoder
CalculateArea	MultilevelSenseAmp.cpp	/^void MultilevelSenseAmp::CalculateArea(double heightArray, double widthArray, AreaModify _option) {$/;"	f	class:MultilevelSenseAmp
CalculateArea	Mux.cpp	/^void Mux::CalculateArea(double _newHeight, double _newWidth, AreaModify _option){$/;"	f	class:Mux
CalculateArea	NewMux.cpp	/^void NewMux::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:NewMux
CalculateArea	NewSwitchMatrix.cpp	/^void NewSwitchMatrix::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:NewSwitchMatrix
CalculateArea	Precharger.cpp	/^void Precharger::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:Precharger
CalculateArea	ReadCircuit.cpp	/^void ReadCircuit::CalculateArea(double _newWidth) {	\/\/ Just add up the area of all the components$/;"	f	class:ReadCircuit
CalculateArea	RowDecoder.cpp	/^void RowDecoder::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:RowDecoder
CalculateArea	SRAMWriteDriver.cpp	/^void SRAMWriteDriver::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:SRAMWriteDriver
CalculateArea	SarADC.cpp	/^void SarADC::CalculateArea(double heightArray, double widthArray, AreaModify _option) {$/;"	f	class:SarADC
CalculateArea	SenseAmp.cpp	/^void SenseAmp::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:SenseAmp
CalculateArea	ShiftAdd.cpp	/^void ShiftAdd::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:ShiftAdd
CalculateArea	Sigmoid.cpp	/^void Sigmoid::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {     \/\/ assign multiple sigmoid unit to operate in parallel$/;"	f	class:Sigmoid
CalculateArea	SramNewSA.cpp	/^void SramNewSA::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:SramNewSA
CalculateArea	SubArray.cpp	/^void SubArray::CalculateArea() {  \/\/calculate layout area for total design$/;"	f	class:SubArray
CalculateArea	SwitchMatrix.cpp	/^void SwitchMatrix::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:SwitchMatrix
CalculateArea	VoltageSenseAmp.cpp	/^void VoltageSenseAmp::CalculateArea(double _widthVoltageSenseAmp) {	\/\/ Just add up the area of all the components$/;"	f	class:VoltageSenseAmp
CalculateArea	WLDecoderOutput.cpp	/^void WLDecoderOutput::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:WLDecoderOutput
CalculateArea	WLNewDecoderDriver.cpp	/^void WLNewDecoderDriver::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:WLNewDecoderDriver
CalculateDrainCap	formula.cpp	/^double CalculateDrainCap($/;"	f
CalculateGateArea	formula.cpp	/^double CalculateGateArea(	\/\/ Calculate layout area and width of logic gate given fixed layout height$/;"	f
CalculateGateCap	formula.cpp	/^double CalculateGateCap(double width, Technology tech) {$/;"	f
CalculateGateCapacitance	formula.cpp	/^void CalculateGateCapacitance($/;"	f
CalculateGateLeakage	formula.cpp	/^double CalculateGateLeakage($/;"	f
CalculateLatency	Adder.cpp	/^void Adder::CalculateLatency(double _rampInput, double _capLoad, double numRead){$/;"	f	class:Adder
CalculateLatency	AdderTree.cpp	/^void AdderTree::CalculateLatency(double numRead, int numUnitAdd, double _capLoad) {$/;"	f	class:AdderTree
CalculateLatency	BitShifter.cpp	/^void BitShifter::CalculateLatency(double numRead) {$/;"	f	class:BitShifter
CalculateLatency	Buffer.cpp	/^void Buffer::CalculateLatency(double numAccessBitRead, double numRead, double numAccessBitWrite, double numWrite){$/;"	f	class:Buffer
CalculateLatency	Bus.cpp	/^void Bus::CalculateLatency(double numRead){$/;"	f	class:Bus
CalculateLatency	Comparator.cpp	/^void Comparator::CalculateLatency(double _rampInput, double _capLoad, double numRead){$/;"	f	class:Comparator
CalculateLatency	CurrentSenseAmp.cpp	/^void CurrentSenseAmp::CalculateLatency(const vector<double> &columnResistance, double numColMuxed, double numRead) {$/;"	f	class:CurrentSenseAmp
CalculateLatency	DFF.cpp	/^void DFF::CalculateLatency(double _rampInput, double numRead){$/;"	f	class:DFF
CalculateLatency	DeMux.cpp	/^void DeMux::CalculateLatency(double _rampInput, double numRead) {	\/\/ rampInput actually is not used$/;"	f	class:DeMux
CalculateLatency	DecoderDriver.cpp	/^void DecoderDriver::CalculateLatency(double _rampInput, double _capLoad1, double _capLoad2, double _resLoad, double numRead, double numWrite) {$/;"	f	class:DecoderDriver
CalculateLatency	HTree.cpp	/^void HTree::CalculateLatency(int x_init, int y_init, int x_end, int y_end, double unitHeight, double unitWidth, double numRead){$/;"	f	class:HTree
CalculateLatency	LevelShifter.cpp	/^void LevelShifter::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, double numRead, double numWrite) {	\/\/ For simplicity, assume shift register is ideal$/;"	f	class:LevelShifter
CalculateLatency	MaxPooling.cpp	/^void MaxPooling::CalculateLatency(double _rampInput, double _capLoad, double numRead){$/;"	f	class:MaxPooling
CalculateLatency	MultilevelSAEncoder.cpp	/^void MultilevelSAEncoder::CalculateLatency(double _rampInput, double numRead){$/;"	f	class:MultilevelSAEncoder
CalculateLatency	MultilevelSenseAmp.cpp	/^void MultilevelSenseAmp::CalculateLatency(const vector<double> &columnResistance, double numColMuxed, double numRead) {$/;"	f	class:MultilevelSenseAmp
CalculateLatency	Mux.cpp	/^void Mux::CalculateLatency(double _rampInput, double _capLoad, double numRead) {  \/\/ rampInput is from SL\/BL, not fron EN signal$/;"	f	class:Mux
CalculateLatency	NewMux.cpp	/^void NewMux::CalculateLatency(double _rampInput, double _capLoad, double numRead, double numWrite) {	\/\/ For simplicity, assume shift register is ideal$/;"	f	class:NewMux
CalculateLatency	NewSwitchMatrix.cpp	/^void NewSwitchMatrix::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, double numRead, double numWrite) {	\/\/ For simplicity, assume shift register is ideal$/;"	f	class:NewSwitchMatrix
CalculateLatency	Precharger.cpp	/^void Precharger::CalculateLatency(double _rampInput, double _capLoad, double numRead, double numWrite){$/;"	f	class:Precharger
CalculateLatency	ReadCircuit.cpp	/^void ReadCircuit::CalculateLatency(double numRead) {$/;"	f	class:ReadCircuit
CalculateLatency	RowDecoder.cpp	/^void RowDecoder::CalculateLatency(double _rampInput, double _capLoad1, double _capLoad2, double numRead, double numWrite) {$/;"	f	class:RowDecoder
CalculateLatency	SRAMWriteDriver.cpp	/^void SRAMWriteDriver::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, double numWrite){$/;"	f	class:SRAMWriteDriver
CalculateLatency	SarADC.cpp	/^void SarADC::CalculateLatency(double numRead) {$/;"	f	class:SarADC
CalculateLatency	SenseAmp.cpp	/^void SenseAmp::CalculateLatency(double numRead) {$/;"	f	class:SenseAmp
CalculateLatency	ShiftAdd.cpp	/^void ShiftAdd::CalculateLatency(double numRead) {$/;"	f	class:ShiftAdd
CalculateLatency	Sigmoid.cpp	/^void Sigmoid::CalculateLatency(double numRead) {$/;"	f	class:Sigmoid
CalculateLatency	SramNewSA.cpp	/^void SramNewSA::CalculateLatency(double numRead) {$/;"	f	class:SramNewSA
CalculateLatency	SubArray.cpp	/^void SubArray::CalculateLatency(double columnRes, const vector<double> &columnResistance, bool CalculateclkFreq) {   \/\/calculate latency for different mode $/;"	f	class:SubArray
CalculateLatency	SwitchMatrix.cpp	/^void SwitchMatrix::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, double numRead, double numWrite) {	\/\/ For simplicity, assume shift register is ideal$/;"	f	class:SwitchMatrix
CalculateLatency	VoltageSenseAmp.cpp	/^void VoltageSenseAmp::CalculateLatency(double capInputLoad, double numRead) {$/;"	f	class:VoltageSenseAmp
CalculateLatency	WLDecoderOutput.cpp	/^void WLDecoderOutput::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, double numRead, double numWrite) {$/;"	f	class:WLDecoderOutput
CalculateLatency	WLNewDecoderDriver.cpp	/^void WLNewDecoderDriver::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, double numRead, double numWrite) {$/;"	f	class:WLNewDecoderDriver
CalculateOnResistance	formula.cpp	/^double CalculateOnResistance(double width, int type, double temperature, Technology tech) {$/;"	f
CalculatePassGateArea	formula.cpp	/^double CalculatePassGateArea(	\/\/ Calculate layout area, height and width of pass gate given the number of folding on the pass gate width$/;"	f
CalculatePower	Adder.cpp	/^void Adder::CalculatePower(double numRead, int numAdderPerOperation) {$/;"	f	class:Adder
CalculatePower	AdderTree.cpp	/^void AdderTree::CalculatePower(double numRead, int numUnitAdd) {$/;"	f	class:AdderTree
CalculatePower	BitShifter.cpp	/^void BitShifter::CalculatePower(double numRead) {$/;"	f	class:BitShifter
CalculatePower	Buffer.cpp	/^void Buffer::CalculatePower(double numAccessBitRead, double numRead, double numAccessBitWrite, double numWrite) {$/;"	f	class:Buffer
CalculatePower	Bus.cpp	/^void Bus::CalculatePower(double numBitAccess, double numRead) {$/;"	f	class:Bus
CalculatePower	Comparator.cpp	/^void Comparator::CalculatePower(double numRead, int numComparatorPerOperation) {$/;"	f	class:Comparator
CalculatePower	CurrentSenseAmp.cpp	/^void CurrentSenseAmp::CalculatePower(const vector<double> &columnResistance, double numRead) {$/;"	f	class:CurrentSenseAmp
CalculatePower	DFF.cpp	/^void DFF::CalculatePower(double numRead, double numDffPerOperation, bool validated) {$/;"	f	class:DFF
CalculatePower	DeMux.cpp	/^void DeMux::CalculatePower(double numRead) {$/;"	f	class:DeMux
CalculatePower	DecoderDriver.cpp	/^void DecoderDriver::CalculatePower(double numReadCellPerOp, double numWriteCellPerOp, double numRead, double numWrite) {$/;"	f	class:DecoderDriver
CalculatePower	HTree.cpp	/^void HTree::CalculatePower(int x_init, int y_init, int x_end, int y_end, double unitHeight, double unitWidth, double numBitAccess, double numRead) {$/;"	f	class:HTree
CalculatePower	LevelShifter.cpp	/^void LevelShifter::CalculatePower(double numRead, double numWrite, double activeRowRead) {      $/;"	f	class:LevelShifter
CalculatePower	MaxPooling.cpp	/^void MaxPooling::CalculatePower(double numRead) {$/;"	f	class:MaxPooling
CalculatePower	MultilevelSAEncoder.cpp	/^void MultilevelSAEncoder::CalculatePower(double numRead) {$/;"	f	class:MultilevelSAEncoder
CalculatePower	MultilevelSenseAmp.cpp	/^void MultilevelSenseAmp::CalculatePower(const vector<double> &columnResistance, double numRead) {$/;"	f	class:MultilevelSenseAmp
CalculatePower	Mux.cpp	/^void Mux::CalculatePower(double numRead) {$/;"	f	class:Mux
CalculatePower	NewMux.cpp	/^void NewMux::CalculatePower(double numRead, double numWrite, double numWritePulse, int mode_1T1R, double activityRowRead, double activityColWrite) {      $/;"	f	class:NewMux
CalculatePower	NewSwitchMatrix.cpp	/^void NewSwitchMatrix::CalculatePower(double numRead, double numWrite, double activityRowRead) {      $/;"	f	class:NewSwitchMatrix
CalculatePower	Precharger.cpp	/^void Precharger::CalculatePower(double numRead, double numWrite) {$/;"	f	class:Precharger
CalculatePower	ReadCircuit.cpp	/^void ReadCircuit::CalculatePower(double numof1, double numof2, double numof3, double numof4, double numof5, double numof6, double numof7, double numof8, double numof9, double numof10, double numof20, double numof30, double numof40, double numof50, double numof60, double numof70, double numof80, double numof90, double numof100, double numRead) {$/;"	f	class:ReadCircuit
CalculatePower	RowDecoder.cpp	/^void RowDecoder::CalculatePower(double numRead, double numWrite) {$/;"	f	class:RowDecoder
CalculatePower	SRAMWriteDriver.cpp	/^void SRAMWriteDriver::CalculatePower(double numWrite) {$/;"	f	class:SRAMWriteDriver
CalculatePower	SarADC.cpp	/^void SarADC::CalculatePower(const vector<double> &columnResistance, double numRead) {$/;"	f	class:SarADC
CalculatePower	SenseAmp.cpp	/^void SenseAmp::CalculatePower(double numRead) {$/;"	f	class:SenseAmp
CalculatePower	ShiftAdd.cpp	/^void ShiftAdd::CalculatePower(double numRead) {$/;"	f	class:ShiftAdd
CalculatePower	Sigmoid.cpp	/^void Sigmoid::CalculatePower(double numRead) {$/;"	f	class:Sigmoid
CalculatePower	SramNewSA.cpp	/^void SramNewSA::CalculatePower(double numRead) {$/;"	f	class:SramNewSA
CalculatePower	SubArray.cpp	/^void SubArray::CalculatePower(const vector<double> &columnResistance) {$/;"	f	class:SubArray
CalculatePower	SwitchMatrix.cpp	/^void SwitchMatrix::CalculatePower(double numRead, double numWrite, double activityRowRead, double activityColWrite) {$/;"	f	class:SwitchMatrix
CalculatePower	VoltageSenseAmp.cpp	/^void VoltageSenseAmp::CalculatePower(double numRead) {$/;"	f	class:VoltageSenseAmp
CalculatePower	WLDecoderOutput.cpp	/^void WLDecoderOutput::CalculatePower(double numRead, double numWrite) {$/;"	f	class:WLDecoderOutput
CalculatePower	WLNewDecoderDriver.cpp	/^void WLNewDecoderDriver::CalculatePower(double numRead, double numWrite) {$/;"	f	class:WLNewDecoderDriver
CalculateTransconductance	formula.cpp	/^double CalculateTransconductance(double width, int type, Technology tech) {$/;"	f
CalculateUnitArea	Comparator.cpp	/^void Comparator::CalculateUnitArea(AreaModify _option) {$/;"	f	class:Comparator
CalculateUnitArea	CurrentSenseAmp.cpp	/^void CurrentSenseAmp::CalculateUnitArea() {$/;"	f	class:CurrentSenseAmp
CalculateUnitArea	MaxPooling.cpp	/^void MaxPooling::CalculateUnitArea(AreaModify _option) {$/;"	f	class:MaxPooling
CalculateUnitArea	ReadCircuit.cpp	/^void ReadCircuit::CalculateUnitArea() {$/;"	f	class:ReadCircuit
CalculateUnitArea	SarADC.cpp	/^void SarADC::CalculateUnitArea() {$/;"	f	class:SarADC
CalculateUnitArea	Sigmoid.cpp	/^void Sigmoid::CalculateUnitArea(AreaModify _option) {      \/\/ firstly calculate single sigmoid unit area$/;"	f	class:Sigmoid
CalculateUnitArea	VoltageSenseAmp.cpp	/^void VoltageSenseAmp::CalculateUnitArea() {$/;"	f	class:VoltageSenseAmp
CellAccessType	typedef.h	/^enum CellAccessType$/;"	g
ChipCalculateArea	Chip.cpp	/^vector<double> ChipCalculateArea(InputParameter& inputParameter, Technology& tech, MemCell& cell, double desiredNumTileNM, double numPENM, double desiredPESizeNM, double desiredNumTileCM, double desiredTileSizeCM, $/;"	f
ChipCalculatePerformance	Chip.cpp	/^double ChipCalculatePerformance(InputParameter& inputParameter, Technology& tech, MemCell& cell, int layerNumber, const string &newweightfile, const string &oldweightfile, const string &inputfile, bool followedByMaxPool, $/;"	f
ChipDesignInitialize	Chip.cpp	/^vector<int> ChipDesignInitialize(InputParameter& inputParameter, Technology& tech, MemCell& cell, bool pip, const vector<vector<double> > &netStructure,$/;"	f
ChipFloorPlan	Chip.cpp	/^vector<vector<double> > ChipFloorPlan(bool findNumTile, bool findUtilization, bool findSpeedUp, const vector<vector<double> > &netStructure, const vector<int > &markNM, $/;"	f
ChipInitialize	Chip.cpp	/^void ChipInitialize(InputParameter& inputParameter, Technology& tech, MemCell& cell, const vector<vector<double> > &netStructure, const vector<int > &markNM, const vector<vector<double> > &numTileEachLayer,$/;"	f
Comparator	Comparator.cpp	/^Comparator::Comparator(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:Comparator
Comparator	Comparator.h	/^class Comparator: public FunctionUnit {$/;"	c
CopyArray	Chip.cpp	/^vector<vector<double> > CopyArray(const vector<vector<double> > &orginal, int positionRow, int positionCol, int numRow, int numCol) {$/;"	f
CopyInput	Chip.cpp	/^vector<vector<double> > CopyInput(const vector<vector<double> > &orginal, int positionRow, int numInputVector, int numRow) {$/;"	f
CopyPEArray	Tile.cpp	/^vector<vector<double> > CopyPEArray(const vector<vector<double> > &orginal, int positionRow, int positionCol, int numRow, int numCol) {$/;"	f
CopyPEInput	Tile.cpp	/^vector<vector<double> > CopyPEInput(const vector<vector<double> > &orginal, int positionRow, int numInputVector, int numRow) {$/;"	f
CopySubArray	ProcessingUnit.cpp	/^vector<vector<double> > CopySubArray(const vector<vector<double> > &orginal, int positionRow, int positionCol, int numRow, int numCol) {$/;"	f
CopySubInput	ProcessingUnit.cpp	/^vector<vector<double> > CopySubInput(const vector<vector<double> > &orginal, int positionRow, int numInputVector, int numRow) {$/;"	f
CurrentSenseAmp	CurrentSenseAmp.cpp	/^CurrentSenseAmp::CurrentSenseAmp(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:CurrentSenseAmp
CurrentSenseAmp	CurrentSenseAmp.h	/^class CurrentSenseAmp: public FunctionUnit {$/;"	c
DDR	Buffer.h	/^	bool DDR, givenClkFreq, SRAM;$/;"	m	class:Buffer
DEMUX_H_	DeMux.h	40;"	d
DFF	DFF.cpp	/^DFF::DFF(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:DFF
DFF	DFF.h	/^class DFF: public FunctionUnit {$/;"	c
DFF_H_	DFF.h	40;"	d
DeMux	DeMux.cpp	/^DeMux::DeMux(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:DeMux
DeMux	DeMux.h	/^class DeMux: public FunctionUnit {$/;"	c
DecoderDriver	DecoderDriver.cpp	/^DecoderDriver::DecoderDriver(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:DecoderDriver
DecoderDriver	DecoderDriver.h	/^class DecoderDriver: public FunctionUnit {$/;"	c
DecoderDriver_H_	DecoderDriver.h	40;"	d
DecoderMode	typedef.h	/^enum DecoderMode$/;"	g
DeviceRoadmap	typedef.h	/^enum DeviceRoadmap$/;"	g
EnlargeSize	formula.cpp	/^void EnlargeSize(double *widthNMOS, double *widthPMOS, double heightTransistorRegion, Technology tech) {	$/;"	f
FET_2D	typedef.h	/^	FET_2D,			\/* 2D FET *\/$/;"	e	enum:TransistorType
FPGA	MultilevelSenseAmp.h	/^	bool FPGA;$/;"	m	class:MultilevelSenseAmp
FPGA	Mux.h	/^	bool FPGA;$/;"	m	class:Mux
FPGA	SarADC.h	/^	bool FPGA;$/;"	m	class:SarADC
FPGA	SubArray.h	/^	bool FPGA;$/;"	m	class:SubArray
FUNCTIONUNIT_H_	FunctionUnit.h	40;"	d
FeFET	typedef.h	/^		FeFET,$/;"	e	enum:Type::MemCellType
FunctionUnit	FunctionUnit.cpp	/^FunctionUnit::FunctionUnit() {$/;"	f	class:FunctionUnit
FunctionUnit	FunctionUnit.h	/^class FunctionUnit {$/;"	c
Gaccumulation	Chip.cpp	/^AdderTree *Gaccumulation;$/;"	v
GetColumnLatency	CurrentSenseAmp.cpp	/^double CurrentSenseAmp::GetColumnLatency(double columnRes) {$/;"	f	class:CurrentSenseAmp
GetColumnLatency	MultilevelSenseAmp.cpp	/^double MultilevelSenseAmp::GetColumnLatency(double columnRes) {$/;"	f	class:MultilevelSenseAmp
GetColumnPower	CurrentSenseAmp.cpp	/^double CurrentSenseAmp::GetColumnPower(double columnRes) {$/;"	f	class:CurrentSenseAmp
GetColumnPower	MultilevelSenseAmp.cpp	/^double MultilevelSenseAmp::GetColumnPower(double columnRes) {$/;"	f	class:MultilevelSenseAmp
GetColumnPower	SarADC.cpp	/^double SarADC::GetColumnPower(double columnRes) {$/;"	f	class:SarADC
GetColumnResistance	ProcessingUnit.cpp	/^vector<double> GetColumnResistance(const vector<double> &input, const vector<vector<double> > &weight, MemCell& cell, bool parallelRead, double resCellAccess) {$/;"	f
GetInputVector	ProcessingUnit.cpp	/^vector<double> GetInputVector(const vector<vector<double> > &input, int numInput, double *activityRowRead) {$/;"	f
GetUnitLengthRes	HTree.cpp	/^double HTree::GetUnitLengthRes(double wireLength) {$/;"	f	class:HTree
GhTree	Chip.cpp	/^HTree *GhTree;$/;"	v
GreLu	Chip.cpp	/^BitShifter *GreLu;$/;"	v
Gsigmoid	Chip.cpp	/^Sigmoid *Gsigmoid;$/;"	v
HEIGHT_WIDTH_RATIO_LIMIT	constant.h	83;"	d
HORIZONTAL	typedef.h	/^	HORIZONTAL,	\/* horizontal bus *\/$/;"	e	enum:BusMode
HP	typedef.h	/^	HP,		\/* High performance *\/$/;"	e	enum:DeviceRoadmap
HTREE_H_	HTree.h	40;"	d
HTree	HTree.cpp	/^HTree::HTree(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:HTree
HTree	HTree.h	/^class HTree: public FunctionUnit {$/;"	c
INPUTPARAMETER_H_	InputParameter.h	40;"	d
INV	constant.h	42;"	d
IR_DROP_TOLERANCE	constant.h	80;"	d
Initialize	Adder.cpp	/^void Adder::Initialize(int _numBit, int _numAdder, double _clkFreq){$/;"	f	class:Adder
Initialize	AdderTree.cpp	/^void AdderTree::Initialize(int _numSubcoreRow, int _numAdderBit, int _numAdderTree, double _clkFreq) {$/;"	f	class:AdderTree
Initialize	BitShifter.cpp	/^void BitShifter::Initialize(int _numUnit, int _numBit, double _clkFreq) {$/;"	f	class:BitShifter
Initialize	Buffer.cpp	/^void Buffer::Initialize(int _numBit, int _interface_width, int _num_interface, double _unitWireRes, double _clkFreq, bool _SRAM){$/;"	f	class:Buffer
Initialize	Bus.cpp	/^void Bus::Initialize(BusMode _mode, int _numRow, int _numCol, double _delaytolerance, double _busWidth, double _unitHeight, double _unitWidth, double _clkFreq){$/;"	f	class:Bus
Initialize	Comparator.cpp	/^void Comparator::Initialize(int _numBit, int _numComparator) {$/;"	f	class:Comparator
Initialize	CurrentSenseAmp.cpp	/^void CurrentSenseAmp::Initialize(int _numCol, bool _parallel, bool _rowbyrow, double _clkFreq, int _numReadCellPerOperationNeuro) {$/;"	f	class:CurrentSenseAmp
Initialize	DFF.cpp	/^void DFF::Initialize(int _numDff, double _clkFreq){$/;"	f	class:DFF
Initialize	DeMux.cpp	/^void DeMux::Initialize(int _numInput, int numRow){$/;"	f	class:DeMux
Initialize	DecoderDriver.cpp	/^void DecoderDriver::Initialize(int _mode, int _numOutput \/* # of array rows\/columns *\/, int numLoad) {$/;"	f	class:DecoderDriver
Initialize	HTree.cpp	/^void HTree::Initialize(int _numRow, int _numCol, double _delaytolerance, double _busWidth, double _clkFreq){$/;"	f	class:HTree
Initialize	LevelShifter.cpp	/^void LevelShifter::Initialize(int _numOutput, double _activityRowRead, double _clkFreq){$/;"	f	class:LevelShifter
Initialize	MaxPooling.cpp	/^void MaxPooling::Initialize(int _numBit, int _window, int _numMaxPooling, double _clkFreq) {    \/\/ able to assign multiple MPU to operate in parallel$/;"	f	class:MaxPooling
Initialize	MultilevelSAEncoder.cpp	/^void MultilevelSAEncoder::Initialize(int _numLevel, int _numEncoder){$/;"	f	class:MultilevelSAEncoder
Initialize	MultilevelSenseAmp.cpp	/^void MultilevelSenseAmp::Initialize(int _numCol, int _levelOutput, double _clkFreq, int _numReadCellPerOperationNeuro, bool _parallel, bool _currentMode) {$/;"	f	class:MultilevelSenseAmp
Initialize	Mux.cpp	/^void Mux::Initialize(int _numInput, int _numSelection, double _resTg, bool _FPGA){$/;"	f	class:Mux
Initialize	NewMux.cpp	/^void NewMux::Initialize(int _numInput){$/;"	f	class:NewMux
Initialize	NewSwitchMatrix.cpp	/^void NewSwitchMatrix::Initialize(int _numOutput, double _activityRowRead, double _clkFreq){$/;"	f	class:NewSwitchMatrix
Initialize	Precharger.cpp	/^void Precharger::Initialize(int _numCol, double _resLoad, double _activityColWrite, int _numReadCellPerOperationNeuro, int _numWriteCellPerOperationNeuro) {$/;"	f	class:Precharger
Initialize	ReadCircuit.cpp	/^void ReadCircuit::Initialize(ReadCircuitMode _mode, int _numReadCol, int _maxNumIntBit, SpikingMode _spikingMode, double _clkFreq) {$/;"	f	class:ReadCircuit
Initialize	RowDecoder.cpp	/^void RowDecoder::Initialize(DecoderMode _mode, int _numAddrRow, bool _MUX, bool _parallel) {$/;"	f	class:RowDecoder
Initialize	SRAMWriteDriver.cpp	/^void SRAMWriteDriver::Initialize(int _numCol, double _activityColWrite, int _numWriteCellPerOperationNeuro){$/;"	f	class:SRAMWriteDriver
Initialize	SarADC.cpp	/^void SarADC::Initialize(int _numCol, int _levelOutput, double _clkFreq, int _numReadCellPerOperationNeuro) {$/;"	f	class:SarADC
Initialize	SenseAmp.cpp	/^void SenseAmp::Initialize(int _numCol, bool _currentSense, double _senseVoltage, double _pitchSenseAmp, double _clkFreq, int _numReadCellPerOperationNeuro) {$/;"	f	class:SenseAmp
Initialize	ShiftAdd.cpp	/^void ShiftAdd::Initialize(int _numUnit, int _numAdderBit, double _clkFreq, SpikingMode _spikingMode, int _numReadPulse) {$/;"	f	class:ShiftAdd
Initialize	Sigmoid.cpp	/^void Sigmoid::Initialize(bool _SRAM, int _numYbit, int _numEntry, int _numFunction, double _clkFreq) {$/;"	f	class:Sigmoid
Initialize	SramNewSA.cpp	/^void SramNewSA::Initialize(int _numCol, int _levelOutput) {$/;"	f	class:SramNewSA
Initialize	SubArray.cpp	/^void SubArray::Initialize(int _numRow, int _numCol, double _unitWireRes){  \/\/initialization module$/;"	f	class:SubArray
Initialize	SwitchMatrix.cpp	/^void SwitchMatrix::Initialize(int _mode, int _numOutput, double _resTg, bool _neuro, bool _parallelWrite, double _activityRowRead, double _activityColWrite, int _numWriteCellPerOperationMemory, int _numWriteCellPerOperationNeuro, double _numWritePulse, double _clkFreq){$/;"	f	class:SwitchMatrix
Initialize	Technology.cpp	/^void Technology::Initialize(int _featureSizeInNano, DeviceRoadmap _deviceRoadmap, TransistorType _transistorType) {$/;"	f	class:Technology
Initialize	VoltageSenseAmp.cpp	/^void VoltageSenseAmp::Initialize(int _numReadCol, double _clkFreq) {$/;"	f	class:VoltageSenseAmp
Initialize	WLDecoderOutput.cpp	/^void WLDecoderOutput::Initialize(int _numWLRow, bool _multifunctional, bool _neuro) {$/;"	f	class:WLDecoderOutput
Initialize	WLNewDecoderDriver.cpp	/^void WLNewDecoderDriver::Initialize(int _numWLRow) {$/;"	f	class:WLNewDecoderDriver
InputParameter	InputParameter.h	/^class InputParameter {$/;"	c
LEVELSHIFTER_H_	LevelShifter.h	40;"	d
LINEAR_REGION_RATIO	constant.h	81;"	d
LSTP	typedef.h	/^	LSTP	\/* Low standby power *\/$/;"	e	enum:DeviceRoadmap
LUT_dynamic	SubArray.h	/^	bool LUT_dynamic;   \/\/ Parameter for FPGA$/;"	m	class:SubArray
LevelShifter	LevelShifter.cpp	/^LevelShifter::LevelShifter(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:LevelShifter
LevelShifter	LevelShifter.h	/^class LevelShifter: public FunctionUnit {$/;"	c
LoadInInputData	Chip.cpp	/^vector<vector<double> > LoadInInputData(const string &inputfile) {$/;"	f
LoadInWeightData	Chip.cpp	/^vector<vector<double> > LoadInWeightData(const string &weightfile, int numRowPerSynapse, int numColPerSynapse, double maxConductance, double minConductance) {$/;"	f
M2_PITCH	constant.h	66;"	d
M3_PITCH	constant.h	67;"	d
MAGIC	typedef.h	/^	MAGIC,		\/* Use magic folding based on the original area *\/$/;"	e	enum:AreaModify
MAINS	makefile	/^MAINS := main.cpp$/;"	m
MAX	formula.h	44;"	d
MAXPOOLING_H_	MaxPooling.h	40;"	d
MAX_NMOS_SIZE	constant.h	49;"	d
MAX_TRANSISTOR_HEIGHT	constant.h	52;"	d
MAX_TRANSISTOR_HEIGHT_FINFET	constant.h	53;"	d
MIN	formula.h	45;"	d
MIN_GAP_BET_CONTACT_POLY	constant.h	59;"	d
MIN_GAP_BET_FIELD_POLY	constant.h	63;"	d
MIN_GAP_BET_GATE_POLY	constant.h	57;"	d
MIN_GAP_BET_GATE_POLY_FINFET	constant.h	58;"	d
MIN_GAP_BET_P_AND_N_DIFFS	constant.h	55;"	d
MIN_GAP_BET_SAME_TYPE_DIFFS	constant.h	56;"	d
MIN_NMOS_SIZE	constant.h	50;"	d
MIN_POLY_EXT_DIFF	constant.h	62;"	d
MIN_WIDTH_POWER_RAIL	constant.h	61;"	d
MULTILEVELSENSEAMP_H_	MultilevelSenseAmp.h	40;"	d
MUX	RowDecoder.h	/^	bool MUX;	\/\/ MUX mode$/;"	m	class:RowDecoder
MUX_H_	Mux.h	40;"	d
MagicLayout	FunctionUnit.cpp	/^void FunctionUnit::MagicLayout() {$/;"	f	class:FunctionUnit
MaxPooling	MaxPooling.cpp	/^MaxPooling::MaxPooling(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), comparator(_inputParameter, _tech, _cell), FunctionUnit() {$/;"	f	class:MaxPooling
MaxPooling	MaxPooling.h	/^class MaxPooling: public FunctionUnit {$/;"	c
MemCell	MemCell.h	/^class MemCell {$/;"	c
MemCellType	typedef.h	/^	enum MemCellType {$/;"	g	namespace:Type
MultilevelSAEncoder	MultilevelSAEncoder.cpp	/^MultilevelSAEncoder::MultilevelSAEncoder(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:MultilevelSAEncoder
MultilevelSAEncoder	MultilevelSAEncoder.h	/^class MultilevelSAEncoder: public FunctionUnit {$/;"	c
MultilevelSAEncoder_H_	MultilevelSAEncoder.h	40;"	d
MultilevelSenseAmp	MultilevelSenseAmp.cpp	/^MultilevelSenseAmp::MultilevelSenseAmp(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), currentSenseAmp(_inputParameter, _tech, _cell), FunctionUnit() {$/;"	f	class:MultilevelSenseAmp
MultilevelSenseAmp	MultilevelSenseAmp.h	/^class MultilevelSenseAmp: public FunctionUnit {$/;"	c
Mux	Mux.cpp	/^Mux::Mux(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:Mux
Mux	Mux.h	/^class Mux: public FunctionUnit {$/;"	c
NAND	constant.h	44;"	d
NEUROSIM_FORMULA_H_	formula.h	40;"	d
NEWMUX_H_	NewMux.h	40;"	d
NEWSWITCHMATRIX_H_	NewSwitchMatrix.h	40;"	d
NMOS	constant.h	46;"	d
NONE	typedef.h	/^	NONE,		\/* No action, just use the original area calculation *\/$/;"	e	enum:AreaModify
NONSPIKING	typedef.h	/^	NONSPIKING,	\/* Binary format *\/$/;"	e	enum:SpikingMode
NOR	constant.h	43;"	d
NewMux	NewMux.cpp	/^NewMux::NewMux(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:NewMux
NewMux	NewMux.h	/^class NewMux: public FunctionUnit {$/;"	c
NewSwitchMatrix	NewSwitchMatrix.cpp	/^NewSwitchMatrix::NewSwitchMatrix(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), dff(_inputParameter, _tech, _cell), FunctionUnit() {$/;"	f	class:NewSwitchMatrix
NewSwitchMatrix	NewSwitchMatrix.h	/^class NewSwitchMatrix: public FunctionUnit {$/;"	c
NonlinearResistance	formula.cpp	/^double NonlinearResistance(double R, double NL, double Vw, double Vr, double V) {	\/\/ Nonlinearity is the current ratio between Vw and V, and R means the resistance at Vr$/;"	f
OBJ	makefile	/^OBJ := $(SRC:.cpp=.o)$/;"	m
OSCILLATION	typedef.h	/^	OSCILLATION	\/* NbO2 *\/$/;"	e	enum:ReadCircuitMode
OVERRIDE	typedef.h	/^	OVERRIDE	\/* directly modify the height and width and calculate new area *\/$/;"	e	enum:AreaModify
OverallEachLayer	Chip.cpp	/^vector<vector<double> > OverallEachLayer(bool utilization, bool speedUp, const vector<vector<double> > &peDup, const vector<vector<double> > &subArrayDup, const vector<int> &pipelineSpeedUp, double desiredTileSizeCM, $/;"	f
OverrideLayout	FunctionUnit.cpp	/^void FunctionUnit::OverrideLayout() {$/;"	f	class:FunctionUnit
PARAM_H_	Param.h	40;"	d
PEDesign	Chip.cpp	/^vector<vector<double> > PEDesign(bool Design, double peSize, double desiredTileSize, double numTileTotal, const vector<int > &markNM, const vector<vector<double> > &netStructure, int numRowPerSynapse, int numColPerSynapse) {$/;"	f
PMOS	constant.h	47;"	d
POLY_WIDTH	constant.h	64;"	d
POLY_WIDTH_FINFET	constant.h	65;"	d
PRECHARGER_H_	Precharger.h	40;"	d
PROCESSINGUNIT_H_	ProcessingUnit.h	40;"	d
Param	Param.cpp	/^Param::Param() {$/;"	f	class:Param
Param	Param.h	/^class Param {$/;"	c
PitchFin	Technology.h	/^	double PitchFin;	\/* Fin pitch, Unit: m *\/$/;"	m	class:Technology
Precharger	Precharger.cpp	/^Precharger::Precharger(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:Precharger
Precharger	Precharger.h	/^class Precharger: public FunctionUnit {$/;"	c
PrintProperty	Adder.cpp	/^void Adder::PrintProperty(const char* str) {$/;"	f	class:Adder
PrintProperty	AdderTree.cpp	/^void AdderTree::PrintProperty(const char* str) {$/;"	f	class:AdderTree
PrintProperty	BitShifter.cpp	/^void BitShifter::PrintProperty(const char* str) {$/;"	f	class:BitShifter
PrintProperty	Buffer.cpp	/^void Buffer::PrintProperty(const char* str) {$/;"	f	class:Buffer
PrintProperty	Bus.cpp	/^void Bus::PrintProperty(const char* str) {$/;"	f	class:Bus
PrintProperty	Comparator.cpp	/^void Comparator::PrintProperty(const char* str) {$/;"	f	class:Comparator
PrintProperty	CurrentSenseAmp.cpp	/^void CurrentSenseAmp::PrintProperty(const char* str) {$/;"	f	class:CurrentSenseAmp
PrintProperty	DFF.cpp	/^void DFF::PrintProperty(const char* str) {$/;"	f	class:DFF
PrintProperty	DeMux.cpp	/^void DeMux::PrintProperty(const char* str) {$/;"	f	class:DeMux
PrintProperty	DecoderDriver.cpp	/^void DecoderDriver::PrintProperty(const char* str) {$/;"	f	class:DecoderDriver
PrintProperty	FunctionUnit.cpp	/^void FunctionUnit::PrintProperty(const char* str) {$/;"	f	class:FunctionUnit
PrintProperty	HTree.cpp	/^void HTree::PrintProperty(const char* str) {$/;"	f	class:HTree
PrintProperty	LevelShifter.cpp	/^void LevelShifter::PrintProperty(const char* str) {$/;"	f	class:LevelShifter
PrintProperty	MaxPooling.cpp	/^void MaxPooling::PrintProperty(const char* str) {$/;"	f	class:MaxPooling
PrintProperty	MultilevelSAEncoder.cpp	/^void MultilevelSAEncoder::PrintProperty(const char* str) {$/;"	f	class:MultilevelSAEncoder
PrintProperty	MultilevelSenseAmp.cpp	/^void MultilevelSenseAmp::PrintProperty(const char* str) {$/;"	f	class:MultilevelSenseAmp
PrintProperty	Mux.cpp	/^void Mux::PrintProperty(const char* str) {$/;"	f	class:Mux
PrintProperty	NewMux.cpp	/^void NewMux::PrintProperty(const char* str) {$/;"	f	class:NewMux
PrintProperty	NewSwitchMatrix.cpp	/^void NewSwitchMatrix::PrintProperty(const char* str) {$/;"	f	class:NewSwitchMatrix
PrintProperty	Precharger.cpp	/^void Precharger::PrintProperty(const char* str) {$/;"	f	class:Precharger
PrintProperty	ReadCircuit.cpp	/^void ReadCircuit::PrintProperty(const char* str) {$/;"	f	class:ReadCircuit
PrintProperty	RowDecoder.cpp	/^void RowDecoder::PrintProperty(const char* str) {$/;"	f	class:RowDecoder
PrintProperty	SRAMWriteDriver.cpp	/^void SRAMWriteDriver::PrintProperty(const char* str) {$/;"	f	class:SRAMWriteDriver
PrintProperty	SarADC.cpp	/^void SarADC::PrintProperty(const char* str) {$/;"	f	class:SarADC
PrintProperty	SenseAmp.cpp	/^void SenseAmp::PrintProperty(const char* str) {$/;"	f	class:SenseAmp
PrintProperty	ShiftAdd.cpp	/^void ShiftAdd::PrintProperty(const char* str) {$/;"	f	class:ShiftAdd
PrintProperty	Sigmoid.cpp	/^void Sigmoid::PrintProperty(const char* str) {$/;"	f	class:Sigmoid
PrintProperty	SramNewSA.cpp	/^void SramNewSA::PrintProperty(const char* str) {$/;"	f	class:SramNewSA
PrintProperty	SubArray.cpp	/^void SubArray::PrintProperty() {$/;"	f	class:SubArray
PrintProperty	SwitchMatrix.cpp	/^void SwitchMatrix::PrintProperty(const char* str) {$/;"	f	class:SwitchMatrix
PrintProperty	Technology.cpp	/^void Technology::PrintProperty() {$/;"	f	class:Technology
PrintProperty	VoltageSenseAmp.cpp	/^void VoltageSenseAmp::PrintProperty(const char* str) {$/;"	f	class:VoltageSenseAmp
PrintProperty	WLDecoderOutput.cpp	/^void WLDecoderOutput::PrintProperty(const char* str) {$/;"	f	class:WLDecoderOutput
PrintProperty	WLNewDecoderDriver.cpp	/^void WLNewDecoderDriver::PrintProperty(const char* str) {$/;"	f	class:WLNewDecoderDriver
ProcessingUnitCalculateArea	ProcessingUnit.cpp	/^vector<double> ProcessingUnitCalculateArea(SubArray *subArray, int numSubArrayRow, int numSubArrayCol, bool NMpe, double *height, double *width, double *bufferArea) {$/;"	f
ProcessingUnitCalculatePerformance	ProcessingUnit.cpp	/^double ProcessingUnitCalculatePerformance(SubArray *subArray, const vector<vector<double> > &newMemory, const vector<vector<double> > &oldMemory, $/;"	f
ProcessingUnitInitialize	ProcessingUnit.cpp	/^void ProcessingUnitInitialize(SubArray *& subArray, InputParameter& inputParameter, Technology& tech, MemCell& cell, int _numSubArrayRowNM, int _numSubArrayColNM, int _numSubArrayRowCM, int _numSubArrayColCM) {$/;"	f
RATIO_READ_THRESHOLD_VS_VOLTAGE	constant.h	85;"	d
READCIRCUIT_H_	ReadCircuit.h	40;"	d
REGULAR_COL	typedef.h	/^	REGULAR_COL,	\/* Regular column mode *\/$/;"	e	enum:DecoderMode
REGULAR_ROW	typedef.h	/^	REGULAR_ROW,	\/* Regular row mode *\/$/;"	e	enum:DecoderMode
ROWDECODER_H_	RowDecoder.h	40;"	d
ROW_MODE	constant.h	87;"	d
RRAM	typedef.h	/^		RRAM,$/;"	e	enum:Type::MemCellType
RRAMFeatureSize	Technology.h	/^	double RRAMFeatureSize;	\/* Process feature size of RRAM, Unit: m *\/$/;"	m	class:Technology
R_OSC_OFF	ReadCircuit.h	/^	double Vhold, Vth, Vrow, Vcol, R_OSC_OFF;$/;"	m	class:ReadCircuit
ReadCircuit	ReadCircuit.cpp	/^ReadCircuit::ReadCircuit(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:ReadCircuit
ReadCircuit	ReadCircuit.h	/^class ReadCircuit: public FunctionUnit {$/;"	c
ReadCircuitMode	typedef.h	/^enum ReadCircuitMode$/;"	g
ReshapeArray	Chip.cpp	/^vector<vector<double> > ReshapeArray(const vector<vector<double> > &orginal, int positionRow, int positionCol, int numRow, int numCol, int numPE, int weightMatrixRow) {$/;"	f
ReshapeInput	Chip.cpp	/^vector<vector<double> > ReshapeInput(const vector<vector<double> > &orginal, int positionRow, int numInputVector, int numRow, int numPE, int weightMatrixRow) {$/;"	f
Rho	Bus.h	/^	double AR, Rho, unitLengthWireResistance, minDist, minDelay, resOnRep;$/;"	m	class:Bus
Rho	HTree.h	/^	double numStage, numTree, AR, Rho, unitLengthWireResistance, minDist, minDelay, resOnRep;$/;"	m	class:HTree
Rho	Param.h	/^	double AR, Rho, wireLengthRow, wireLengthCol, unitLengthWireResistance, wireResistanceRow, wireResistanceCol;$/;"	m	class:Param
RowDecoder	RowDecoder.cpp	/^RowDecoder::RowDecoder(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit(){$/;"	f	class:RowDecoder
RowDecoder	RowDecoder.h	/^class RowDecoder: public FunctionUnit {$/;"	c
Rref	CurrentSenseAmp.h	/^	double clkFreq, Rref;$/;"	m	class:CurrentSenseAmp
Rref	MultilevelSenseAmp.h	/^	vector<double> Rref;$/;"	m	class:MultilevelSenseAmp
Rref	SarADC.h	/^	vector<double> Rref;$/;"	m	class:SarADC
SARADC	Param.h	/^	bool globalBufferType, tileBufferType, peBufferType, chipActivation, reLu, novelMapping, pipeline, SARADC, currentMode, validated, synchronous;$/;"	m	class:Param
SARADC	SubArray.h	/^	bool SARADC;                \/\/ true: use sar adc; false: use MLSA	$/;"	m	class:SubArray
SARADC_H_	SarADC.h	40;"	d
SENSEAMP_H_	SenseAmp.h	40;"	d
SHIFTADD_H_	ShiftAdd.h	40;"	d
SIGMOID_H_	Sigmoid.h	40;"	d
SPIKING	typedef.h	/^	SPIKING$/;"	e	enum:SpikingMode
SRAM	Buffer.h	/^	bool DDR, givenClkFreq, SRAM;$/;"	m	class:Buffer
SRAM	Sigmoid.h	/^	bool SRAM;$/;"	m	class:Sigmoid
SRAM	typedef.h	/^		SRAM,$/;"	e	enum:Type::MemCellType
SRAMNEWSA_H_	SramNewSA.h	40;"	d
SRAMWRITEDRIVER_H_	SRAMWriteDriver.h	40;"	d
SRAMWriteDriver	SRAMWriteDriver.cpp	/^SRAMWriteDriver::SRAMWriteDriver(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:SRAMWriteDriver
SRAMWriteDriver	SRAMWriteDriver.h	/^class SRAMWriteDriver: public FunctionUnit {$/;"	c
SRC	makefile	/^SRC := $(filter-out $(MAINS),$(ALLSRC))$/;"	m
SUBARRAY_H_	SubArray.h	40;"	d
SWITCHMATRIX_H_	SwitchMatrix.h	40;"	d
SarADC	SarADC.cpp	/^SarADC::SarADC(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:SarADC
SarADC	SarADC.h	/^class SarADC: public FunctionUnit {$/;"	c
SaveOutput	Adder.cpp	/^void Adder::SaveOutput(const char* str) {$/;"	f	class:Adder
SaveOutput	Bus.cpp	/^void Bus::SaveOutput(const char* str) {$/;"	f	class:Bus
SaveOutput	Comparator.cpp	/^void Comparator::SaveOutput(const char* str) {$/;"	f	class:Comparator
SaveOutput	DFF.cpp	/^void DFF::SaveOutput(const char* str) {$/;"	f	class:DFF
SaveOutput	DeMux.cpp	/^void DeMux::SaveOutput(const char* str) {$/;"	f	class:DeMux
SaveOutput	DecoderDriver.cpp	/^void DecoderDriver::SaveOutput(const char* str) {$/;"	f	class:DecoderDriver
SaveOutput	FunctionUnit.cpp	/^void FunctionUnit::SaveOutput(const char* str) {$/;"	f	class:FunctionUnit
SaveOutput	Mux.cpp	/^void Mux::SaveOutput(const char* str) {$/;"	f	class:Mux
SaveOutput	NewSwitchMatrix.cpp	/^void NewSwitchMatrix::SaveOutput(const char* str) {$/;"	f	class:NewSwitchMatrix
SaveOutput	ReadCircuit.cpp	/^void ReadCircuit::SaveOutput(const char* str) {$/;"	f	class:ReadCircuit
SaveOutput	RowDecoder.cpp	/^void RowDecoder::SaveOutput(const char* str) {$/;"	f	class:RowDecoder
SaveOutput	ShiftAdd.cpp	/^void ShiftAdd::SaveOutput(const char* str) {$/;"	f	class:ShiftAdd
SaveOutput	Sigmoid.cpp	/^void Sigmoid::SaveOutput(const char* str) {$/;"	f	class:Sigmoid
SaveOutput	SwitchMatrix.cpp	/^void SwitchMatrix::SaveOutput(const char* str) {$/;"	f	class:SwitchMatrix
SaveOutput	WLDecoderOutput.cpp	/^void WLDecoderOutput::SaveOutput(const char* str) {$/;"	f	class:WLDecoderOutput
SaveOutput	WLNewDecoderDriver.cpp	/^void WLNewDecoderDriver::SaveOutput(const char* str) {$/;"	f	class:WLNewDecoderDriver
SenseAmp	SenseAmp.cpp	/^SenseAmp::SenseAmp(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:SenseAmp
SenseAmp	SenseAmp.h	/^class SenseAmp: public FunctionUnit {$/;"	c
ShiftAdd	ShiftAdd.cpp	/^ShiftAdd::ShiftAdd(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), adder(_inputParameter, _tech, _cell), dff(_inputParameter, _tech, _cell), FunctionUnit() {$/;"	f	class:ShiftAdd
ShiftAdd	ShiftAdd.h	/^class ShiftAdd: public FunctionUnit {$/;"	c
Sigmoid	Sigmoid.cpp	/^Sigmoid::Sigmoid(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), mux(_inputParameter, _tech, _cell), muxDecoder(_inputParameter, _tech, _cell), wlDecoder(_inputParameter, _tech, _cell), colDecoder(_inputParameter, _tech, _cell), senseAmp(_inputParameter, _tech, _cell), colDecoderDriver(_inputParameter, _tech, _cell), voltageSenseAmp(_inputParameter, _tech, _cell), FunctionUnit() {$/;"	f	class:Sigmoid
Sigmoid	Sigmoid.h	/^class Sigmoid: public FunctionUnit {$/;"	c
SpikingMode	typedef.h	/^enum SpikingMode$/;"	g
SramNewSA	SramNewSA.cpp	/^SramNewSA::SramNewSA(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:SramNewSA
SramNewSA	SramNewSA.h	/^class SramNewSA: public FunctionUnit {$/;"	c
SubArray	SubArray.cpp	/^SubArray::SubArray(InputParameter& _inputParameter, Technology& _tech, MemCell& _cell):$/;"	f	class:SubArray
SubArray	SubArray.h	/^class SubArray: public FunctionUnit {$/;"	c
SubArrayDup	Chip.cpp	/^vector<vector<double> > SubArrayDup(double desiredPESizeCM, double desiredPESizeNM, const vector<int > &markNM, const vector<vector<double> > &netStructure, int numRowPerSynapse, int numColPerSynapse) {$/;"	f
SwitchMatrix	SwitchMatrix.cpp	/^SwitchMatrix::SwitchMatrix(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), dff(_inputParameter, _tech, _cell), FunctionUnit() {$/;"	f	class:SwitchMatrix
SwitchMatrix	SwitchMatrix.h	/^class SwitchMatrix: public FunctionUnit {$/;"	c
TECHNOLOGY_H_	Technology.h	40;"	d
TFET	typedef.h	/^	TFET$/;"	e	enum:TransistorType
TILE_H_	Tile.h	40;"	d
TYPEDEF_H_	typedef.h	40;"	d
Technology	Technology.cpp	/^Technology::Technology() {$/;"	f	class:Technology
Technology	Technology.h	/^class Technology {$/;"	c
TgHeight	DecoderDriver.h	/^	double TgHeight, TgWidth;$/;"	m	class:DecoderDriver
TgHeight	LevelShifter.h	/^	double TgHeight, TgWidth;$/;"	m	class:LevelShifter
TgHeight	NewMux.h	/^	double TgHeight, TgWidth;$/;"	m	class:NewMux
TgHeight	NewSwitchMatrix.h	/^	double TgHeight, TgWidth;$/;"	m	class:NewSwitchMatrix
TgHeight	SwitchMatrix.h	/^	double TgHeight, TgWidth;$/;"	m	class:SwitchMatrix
TgWidth	DecoderDriver.h	/^	double TgHeight, TgWidth;$/;"	m	class:DecoderDriver
TgWidth	LevelShifter.h	/^	double TgHeight, TgWidth;$/;"	m	class:LevelShifter
TgWidth	Mux.h	/^	double TgWidth;$/;"	m	class:Mux
TgWidth	NewMux.h	/^	double TgHeight, TgWidth;$/;"	m	class:NewMux
TgWidth	NewSwitchMatrix.h	/^	double TgHeight, TgWidth;$/;"	m	class:NewSwitchMatrix
TgWidth	SwitchMatrix.h	/^	double TgHeight, TgWidth;$/;"	m	class:SwitchMatrix
TileCalculateArea	Tile.cpp	/^vector<double> TileCalculateArea(double numPE, double peSize, bool NMTile, double *height, double *width) {$/;"	f
TileCalculatePerformance	Tile.cpp	/^void TileCalculatePerformance(const vector<vector<double> > &newMemory, const vector<vector<double> > &oldMemory, const vector<vector<double> > &inputVector, int novelMap, double numPE, $/;"	f
TileDesignCM	Chip.cpp	/^vector<double> TileDesignCM(double tileSize, const vector<int > &markNM, const vector<vector<double> > &netStructure, int numRowPerSynapse, int numColPerSynapse) {$/;"	f
TileDesignNM	Chip.cpp	/^vector<double> TileDesignNM(double peSize, const vector<int > &markNM, const vector<vector<double> > &netStructure, int numRowPerSynapse, int numColPerSynapse, double numPENM){$/;"	f
TileInitialize	Tile.cpp	/^void TileInitialize(InputParameter& inputParameter, Technology& tech, MemCell& cell, double _numPENM, double _peSizeNM, double _numPECM, double _peSizeCM){$/;"	f
TransistorType	typedef.h	/^enum TransistorType$/;"	g
Type	typedef.h	/^namespace Type {	\/\/ To prevent name collision$/;"	n
UnInitialize	LevelShifter.cpp	/^void LevelShifter::UnInitialize(){$/;"	f	class:LevelShifter
VERTICAL	typedef.h	/^	VERTICAL,	\/* vertical bus *\/$/;"	e	enum:BusMode
VOLTAGESENSEAMP_H_	VoltageSenseAmp.h	40;"	d
Vcol	ReadCircuit.h	/^	double Vhold, Vth, Vrow, Vcol, R_OSC_OFF;$/;"	m	class:ReadCircuit
Vhold	ReadCircuit.h	/^	double Vhold, Vth, Vrow, Vcol, R_OSC_OFF;$/;"	m	class:ReadCircuit
VoltageSenseAmp	VoltageSenseAmp.cpp	/^VoltageSenseAmp::VoltageSenseAmp(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit() {$/;"	f	class:VoltageSenseAmp
VoltageSenseAmp	VoltageSenseAmp.h	/^class VoltageSenseAmp: public FunctionUnit {$/;"	c
Vrow	ReadCircuit.h	/^	double Vhold, Vth, Vrow, Vcol, R_OSC_OFF;$/;"	m	class:ReadCircuit
Vth	ReadCircuit.h	/^	double Vhold, Vth, Vrow, Vcol, R_OSC_OFF;$/;"	m	class:ReadCircuit
WLDecoderOutput	WLDecoderOutput.cpp	/^WLDecoderOutput::WLDecoderOutput(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit(){$/;"	f	class:WLDecoderOutput
WLDecoderOutput	WLDecoderOutput.h	/^class WLDecoderOutput: public FunctionUnit {$/;"	c
WLDecoderOutput_H_	WLDecoderOutput.h	40;"	d
WLNewDecoderDriver	WLNewDecoderDriver.cpp	/^WLNewDecoderDriver::WLNewDecoderDriver(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): inputParameter(_inputParameter), tech(_tech), cell(_cell), FunctionUnit(){$/;"	f	class:WLNewDecoderDriver
WLNewDecoderDriver	WLNewDecoderDriver.h	/^class WLNewDecoderDriver : public FunctionUnit {$/;"	c
WLNewDecoderDriver_H_	WLNewDecoderDriver.h	2;"	d
W_SENSE_EN	constant.h	77;"	d
W_SENSE_ISO	constant.h	76;"	d
W_SENSE_MUX	constant.h	78;"	d
W_SENSE_N	constant.h	75;"	d
W_SENSE_P	constant.h	74;"	d
XNORparallelMode	Param.h	/^	int XNORparallelMode, XNORsequentialMode, BNNparallelMode, BNNsequentialMode, conventionalParallel, conventionalSequential; $/;"	m	class:Param
XNORparallelMode	SubArray.h	/^	bool XNORparallelMode;    $/;"	m	class:SubArray
XNORsequentialMode	Param.h	/^	int XNORparallelMode, XNORsequentialMode, BNNparallelMode, BNNsequentialMode, conventionalParallel, conventionalSequential; $/;"	m	class:Param
XNORsequentialMode	SubArray.h	/^	bool XNORsequentialMode;      $/;"	m	class:SubArray
_MEMCELL_H_	MemCell.h	40;"	d
accessType	MemCell.h	/^	CellAccessType accessType;	\/* Cell access type: CMOS, BJT, or diode *\/$/;"	m	class:MemCell
accessVoltage	MemCell.h	/^	double accessVoltage;$/;"	m	class:MemCell
accessVoltage	Param.h	/^	double accessVoltage, resistanceAccess;$/;"	m	class:Param
accesstype	Param.h	/^	int operationmode, operationmodeBack, memcelltype, accesstype, transistortype, deviceroadmap;      		$/;"	m	class:Param
accumulationCM	Tile.cpp	/^AdderTree *accumulationCM;$/;"	v
accumulationNM	Tile.cpp	/^AdderTree *accumulationNM;$/;"	v
activityColRead	SubArray.h	/^	double activityRowRead, activityColRead;		\/\/ Activity for # of rows in the read$/;"	m	class:SubArray
activityColWrite	LevelShifter.h	/^	double activityColWrite;$/;"	m	class:LevelShifter
activityColWrite	NewSwitchMatrix.h	/^	double activityColWrite;$/;"	m	class:NewSwitchMatrix
activityColWrite	Precharger.h	/^	double activityColWrite;$/;"	m	class:Precharger
activityColWrite	SRAMWriteDriver.h	/^	double activityColWrite;$/;"	m	class:SRAMWriteDriver
activityColWrite	SubArray.h	/^	double activityColWrite;	\/\/ Activity for # of columns in the write$/;"	m	class:SubArray
activityColWrite	SwitchMatrix.h	/^	double activityColWrite;$/;"	m	class:SwitchMatrix
activityRowRead	LevelShifter.h	/^	double activityRowRead;$/;"	m	class:LevelShifter
activityRowRead	NewSwitchMatrix.h	/^	double activityRowRead;$/;"	m	class:NewSwitchMatrix
activityRowRead	SubArray.h	/^	double activityRowRead, activityColRead;		\/\/ Activity for # of rows in the read$/;"	m	class:SubArray
activityRowRead	SwitchMatrix.h	/^	double activityRowRead;$/;"	m	class:SwitchMatrix
activityRowWrite	SubArray.h	/^	double activityRowWrite;	\/\/ Activity for # of rows in the write$/;"	m	class:SubArray
adder	AdderTree.h	/^	Adder adder;$/;"	m	class:AdderTree
adder	ShiftAdd.h	/^	Adder adder;$/;"	m	class:ShiftAdd
adder	SubArray.h	/^	Adder                    adder;$/;"	m	class:SubArray
adderTreeCM	ProcessingUnit.cpp	/^AdderTree *adderTreeCM;$/;"	v
adderTreeNM	ProcessingUnit.cpp	/^AdderTree *adderTreeNM;$/;"	v
algoWeightMax	Param.h	/^	double algoWeightMax, algoWeightMin;$/;"	m	class:Param
algoWeightMin	Param.h	/^	double algoWeightMax, algoWeightMin;$/;"	m	class:Param
alpha	Param.h	/^	double alpha, beta, gamma, delta, epsilon, zeta;$/;"	m	class:Param
area	FunctionUnit.h	/^	double area;		\/* Unit: m^2 *\/$/;"	m	class:FunctionUnit
area	MemCell.h	/^	double area;			\/* Cell area, Unit: F^2 *\/$/;"	m	class:MemCell
areaADC	SubArray.h	/^	double areaADC, areaAccum, areaOther, readLatencyADC, readLatencyAccum, readLatencyOther, readDynamicEnergyADC, readDynamicEnergyAccum, readDynamicEnergyOther;$/;"	m	class:SubArray
areaAccum	SubArray.h	/^	double areaADC, areaAccum, areaOther, readLatencyADC, readLatencyAccum, readLatencyOther, readDynamicEnergyADC, readDynamicEnergyAccum, readDynamicEnergyOther;$/;"	m	class:SubArray
areaArray	SubArray.h	/^	double areaArray;$/;"	m	class:SubArray
areaDff	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit
areaOther	SubArray.h	/^	double areaADC, areaAccum, areaOther, readLatencyADC, readLatencyAccum, readLatencyOther, readDynamicEnergyADC, readDynamicEnergyAccum, readDynamicEnergyOther;$/;"	m	class:SubArray
areaReadBody	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit
areaUnit	Comparator.h	/^    double areaUnit;$/;"	m	class:Comparator
areaUnit	CurrentSenseAmp.h	/^	double areaUnit;$/;"	m	class:CurrentSenseAmp
areaUnit	MaxPooling.h	/^    double areaUnit;$/;"	m	class:MaxPooling
areaUnit	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit
areaUnit	SarADC.h	/^	double clkFreq, areaUnit;$/;"	m	class:SarADC
areaUnit	Sigmoid.h	/^	double hUnit, wUnit, areaUnit;$/;"	m	class:Sigmoid
areaUnit	VoltageSenseAmp.h	/^	double areaUnit;$/;"	m	class:VoltageSenseAmp
aspectRatio	MemCell.h	/^	double aspectRatio;		\/* Cell aspect ratio, H\/W *\/$/;"	m	class:MemCell
avgBitReadDynamicEnergy	Buffer.h	/^	double dffDynamicEnergy, readWholeDynamicEnergy, writeWholeDynamicEnergy, avgBitReadDynamicEnergy, avgBitWriteDynamicEnergy;$/;"	m	class:Buffer
avgBitReadLatency	Buffer.h	/^	double readWholeLatency, writeWholeLatency, avgBitReadLatency, avgBitWriteLatency;$/;"	m	class:Buffer
avgBitWriteDynamicEnergy	Buffer.h	/^	double dffDynamicEnergy, readWholeDynamicEnergy, writeWholeDynamicEnergy, avgBitReadDynamicEnergy, avgBitWriteDynamicEnergy;$/;"	m	class:Buffer
avgBitWriteLatency	Buffer.h	/^	double readWholeLatency, writeWholeLatency, avgBitReadLatency, avgBitWriteLatency;$/;"	m	class:Buffer
avgWeightBit	Param.h	/^	int numlut, numColMuxed, numWriteColMuxed, levelOutput, avgWeightBit, numBitInput;$/;"	m	class:Param
avgWeightBit	SubArray.h	/^	int avgWeightBit;		\/\/ Average weight for each synapse (value can range from 0 to numCellPerSynapse)$/;"	m	class:SubArray
backToBack	SubArray.h	/^	bool backToBack;    \/\/ Parameter for FPGA Mux (2 Mux triangles can combine into a Mux rectangle)$/;"	m	class:SubArray
beta	Param.h	/^	double alpha, beta, gamma, delta, epsilon, zeta;$/;"	m	class:Param
blSwitchMatrix	SubArray.h	/^	SwitchMatrix             blSwitchMatrix;$/;"	m	class:SubArray
bllevelshifter	SubArray.h	/^	LevelShifter			 bllevelshifter;$/;"	m	class:SubArray
bufferInputCM	ProcessingUnit.cpp	/^DFF *bufferInputCM;$/;"	v
bufferInputNM	ProcessingUnit.cpp	/^DFF *bufferInputNM;$/;"	v
bufferOutputCM	ProcessingUnit.cpp	/^DFF *bufferOutputCM;$/;"	v
bufferOutputNM	ProcessingUnit.cpp	/^DFF *bufferOutputNM;$/;"	v
buildInPotential	Technology.h	/^	double buildInPotential;	\/* Bottom junction built-in potential(PB in BSIM4 model), Unit: V *\/	$/;"	m	class:Technology
busInputCM	ProcessingUnit.cpp	/^Bus *busInputCM;$/;"	v
busInputNM	ProcessingUnit.cpp	/^Bus *busInputNM;$/;"	v
busOutputCM	ProcessingUnit.cpp	/^Bus *busOutputCM;$/;"	v
busOutputNM	ProcessingUnit.cpp	/^Bus *busOutputNM;$/;"	v
busWidth	Bus.h	/^	double busWidth, delaytolerance, unitLengthWireCap, wireLength;$/;"	m	class:Bus
busWidth	HTree.h	/^	double busWidth, delaytolerance, unitLengthWireCap, totalWireLength;$/;"	m	class:HTree
capCellAccess	SubArray.h	/^	double capCellAccess;	\/\/ Capacitance of access device, Unit: ohm$/;"	m	class:SubArray
capCol	SubArray.h	/^	double capCol;		\/\/ Capacitance of column, Unit: F$/;"	m	class:SubArray
capDffInvInput	ReadCircuit.h	/^	double capDffTgGateN, capDffTgGateP, capDffTgDrain, capDffInvInput, capDffInvOutput, capNorInput, capNorOutput;$/;"	m	class:ReadCircuit
capDffInvOutput	ReadCircuit.h	/^	double capDffTgGateN, capDffTgGateP, capDffTgDrain, capDffInvInput, capDffInvOutput, capNorInput, capNorOutput;$/;"	m	class:ReadCircuit
capDffTgDrain	ReadCircuit.h	/^	double capDffTgGateN, capDffTgGateP, capDffTgDrain, capDffInvInput, capDffInvOutput, capNorInput, capNorOutput;$/;"	m	class:ReadCircuit
capDffTgGateN	ReadCircuit.h	/^	double capDffTgGateN, capDffTgGateP, capDffTgDrain, capDffInvInput, capDffInvOutput, capNorInput, capNorOutput;$/;"	m	class:ReadCircuit
capDffTgGateP	ReadCircuit.h	/^	double capDffTgGateN, capDffTgGateP, capDffTgDrain, capDffInvInput, capDffInvOutput, capNorInput, capNorOutput;$/;"	m	class:ReadCircuit
capDrainToChannel	Technology.h	/^	double capDrainToChannel;	\/* Junction drain to channel capacitance, Cjswg, Unit: F\/m *\/$/;"	m	class:Technology
capDriverInvInput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDriverInvInput, capDriverInvOutput;$/;"	m	class:RowDecoder
capDriverInvOutput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDriverInvInput, capDriverInvOutput;$/;"	m	class:RowDecoder
capEnInvInput	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:Mux
capEnInvOutput	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:Mux
capFringe	Technology.h	/^	double capFringe;		\/* Fringe capacitance, Unit: F\/m *\/$/;"	m	class:Technology
capHighDrain	LevelShifter.h	/^	double capMidGateN, capLowDrain, capHighDrain;$/;"	m	class:LevelShifter
capIdealGate	Technology.h	/^	double capIdealGate;	\/* Ideal gate capacitance, Unit: F\/m *\/$/;"	m	class:Technology
capInput	ReadCircuit.h	/^	double capInput;$/;"	m	class:ReadCircuit
capInvInput	Buffer.h	/^	double capTgDrain, capTgGateN, capTgGateP, capInvInput, capInvOutput;$/;"	m	class:Buffer
capInvInput	Bus.h	/^	double widthInvN, widthInvP, wInv, hInv, capInvInput, capInvOutput;$/;"	m	class:Bus
capInvInput	Comparator.h	/^	double capInvInput, capInvOutput, capNand2Input, capNand2Output, capNand3Input, capNand3Output;$/;"	m	class:Comparator
capInvInput	DFF.h	/^	double capTgDrain, capTgGateN, capTgGateP, capInvInput, capInvOutput;$/;"	m	class:DFF
capInvInput	DeMux.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DeMux
capInvInput	DecoderDriver.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DecoderDriver
capInvInput	HTree.h	/^	double widthInvN, widthInvP, wInv, hInv, capInvInput, capInvOutput;$/;"	m	class:HTree
capInvInput	MaxPooling.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capNor2Input, capNor2Output;$/;"	m	class:MaxPooling
capInvInput	MultilevelSAEncoder.h	/^	double capNandInput, capNandOutput, capNandLgInput, capNandLgOutput, capInvInput, capInvOutput;$/;"	m	class:MultilevelSAEncoder
capInvInput	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain, capInvInput, capInvOutput;$/;"	m	class:ReadCircuit
capInvInput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDriverInvInput, capDriverInvOutput;$/;"	m	class:RowDecoder
capInvInput	SRAMWriteDriver.h	/^	double capInvInput, capInvOutput;$/;"	m	class:SRAMWriteDriver
capInvInput	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain;$/;"	m	class:WLDecoderOutput
capInvInput	WLNewDecoderDriver.h	/^	double capNandInput, capNandOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:WLNewDecoderDriver
capInvOutput	Buffer.h	/^	double capTgDrain, capTgGateN, capTgGateP, capInvInput, capInvOutput;$/;"	m	class:Buffer
capInvOutput	Bus.h	/^	double widthInvN, widthInvP, wInv, hInv, capInvInput, capInvOutput;$/;"	m	class:Bus
capInvOutput	Comparator.h	/^	double capInvInput, capInvOutput, capNand2Input, capNand2Output, capNand3Input, capNand3Output;$/;"	m	class:Comparator
capInvOutput	DFF.h	/^	double capTgDrain, capTgGateN, capTgGateP, capInvInput, capInvOutput;$/;"	m	class:DFF
capInvOutput	DeMux.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DeMux
capInvOutput	DecoderDriver.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DecoderDriver
capInvOutput	HTree.h	/^	double widthInvN, widthInvP, wInv, hInv, capInvInput, capInvOutput;$/;"	m	class:HTree
capInvOutput	MaxPooling.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capNor2Input, capNor2Output;$/;"	m	class:MaxPooling
capInvOutput	MultilevelSAEncoder.h	/^	double capNandInput, capNandOutput, capNandLgInput, capNandLgOutput, capInvInput, capInvOutput;$/;"	m	class:MultilevelSAEncoder
capInvOutput	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain, capInvInput, capInvOutput;$/;"	m	class:ReadCircuit
capInvOutput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDriverInvInput, capDriverInvOutput;$/;"	m	class:RowDecoder
capInvOutput	SRAMWriteDriver.h	/^	double capInvInput, capInvOutput;$/;"	m	class:SRAMWriteDriver
capInvOutput	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain;$/;"	m	class:WLDecoderOutput
capInvOutput	WLNewDecoderDriver.h	/^	double capNandInput, capNandOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:WLNewDecoderDriver
capJunction	Technology.h	/^	double capJunction;		\/* Junction bottom capacitance, Cj0, Unit: F\/m^2 *\/$/;"	m	class:Technology
capLoad	Adder.h	/^	double capLoad;$/;"	m	class:Adder
capLoad	Comparator.h	/^	double capLoad;$/;"	m	class:Comparator
capLoad	LevelShifter.h	/^	double capLoad;$/;"	m	class:LevelShifter
capLoad	MaxPooling.h	/^	double capLoad;$/;"	m	class:MaxPooling
capLoad	Mux.h	/^	double capLoad;$/;"	m	class:Mux
capLoad	NewMux.h	/^	double capLoad;$/;"	m	class:NewMux
capLoad	NewSwitchMatrix.h	/^	double capLoad;$/;"	m	class:NewSwitchMatrix
capLoad	Precharger.h	/^	double capLoad, resLoad;$/;"	m	class:Precharger
capLoad	SRAMWriteDriver.h	/^	double capLoad, resLoad;$/;"	m	class:SRAMWriteDriver
capLoad	SenseAmp.h	/^	double capLoad;			\/* Load capacitance of sense amplifier *\/$/;"	m	class:SenseAmp
capLoad	Sigmoid.h	/^	double capSRAMCell, capLoad;$/;"	m	class:Sigmoid
capLoad	SwitchMatrix.h	/^	double capLoad;$/;"	m	class:SwitchMatrix
capLoad	WLDecoderOutput.h	/^	double capLoad;	\/* Output capacitance, unit: F *\/$/;"	m	class:WLDecoderOutput
capLoad	WLNewDecoderDriver.h	/^	double capLoad;	\/* Output capacitance, unit: F *\/$/;"	m	class:WLNewDecoderDriver
capLoad1	DecoderDriver.h	/^	double capLoad1, capLoad2;	\/* Output capacitance, unit: F *\/$/;"	m	class:DecoderDriver
capLoad1	RowDecoder.h	/^	double capLoad1;	\/\/ REGULAR: general capLoad, MUX: the NMOS Tg gates$/;"	m	class:RowDecoder
capLoad2	DecoderDriver.h	/^	double capLoad1, capLoad2;	\/* Output capacitance, unit: F *\/$/;"	m	class:DecoderDriver
capLoad2	RowDecoder.h	/^	double capLoad2;	\/\/ MUX: the PMOS Tg gates$/;"	m	class:RowDecoder
capLoadPerColumn	Precharger.h	/^	double capLoadPerColumn;$/;"	m	class:Precharger
capLowDrain	LevelShifter.h	/^	double capMidGateN, capLowDrain, capHighDrain;$/;"	m	class:LevelShifter
capMidGateN	LevelShifter.h	/^	double capMidGateN, capLowDrain, capHighDrain;$/;"	m	class:LevelShifter
capMinInvInput	Bus.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:Bus
capMinInvInput	HTree.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:HTree
capMinInvOutput	Bus.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:Bus
capMinInvOutput	HTree.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:HTree
capMuxInvInput	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:Mux
capMuxInvOutput	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:Mux
capNand2Input	Comparator.h	/^	double capInvInput, capInvOutput, capNand2Input, capNand2Output, capNand3Input, capNand3Output;$/;"	m	class:Comparator
capNand2Output	Comparator.h	/^	double capInvInput, capInvOutput, capNand2Input, capNand2Output, capNand3Input, capNand3Output;$/;"	m	class:Comparator
capNand3Input	Comparator.h	/^	double capInvInput, capInvOutput, capNand2Input, capNand2Output, capNand3Input, capNand3Output;$/;"	m	class:Comparator
capNand3Output	Comparator.h	/^	double capInvInput, capInvOutput, capNand2Input, capNand2Output, capNand3Input, capNand3Output;$/;"	m	class:Comparator
capNandInput	Adder.h	/^	double capNandInput, capNandOutput;$/;"	m	class:Adder
capNandInput	MaxPooling.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capNor2Input, capNor2Output;$/;"	m	class:MaxPooling
capNandInput	MultilevelSAEncoder.h	/^	double capNandInput, capNandOutput, capNandLgInput, capNandLgOutput, capInvInput, capInvOutput;$/;"	m	class:MultilevelSAEncoder
capNandInput	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:Mux
capNandInput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDriverInvInput, capDriverInvOutput;$/;"	m	class:RowDecoder
capNandInput	WLNewDecoderDriver.h	/^	double capNandInput, capNandOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:WLNewDecoderDriver
capNandLgInput	MultilevelSAEncoder.h	/^	double capNandInput, capNandOutput, capNandLgInput, capNandLgOutput, capInvInput, capInvOutput;$/;"	m	class:MultilevelSAEncoder
capNandLgOutput	MultilevelSAEncoder.h	/^	double capNandInput, capNandOutput, capNandLgInput, capNandLgOutput, capInvInput, capInvOutput;$/;"	m	class:MultilevelSAEncoder
capNandOutput	Adder.h	/^	double capNandInput, capNandOutput;$/;"	m	class:Adder
capNandOutput	MaxPooling.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capNor2Input, capNor2Output;$/;"	m	class:MaxPooling
capNandOutput	MultilevelSAEncoder.h	/^	double capNandInput, capNandOutput, capNandLgInput, capNandLgOutput, capInvInput, capInvOutput;$/;"	m	class:MultilevelSAEncoder
capNandOutput	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:Mux
capNandOutput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDriverInvInput, capDriverInvOutput;$/;"	m	class:RowDecoder
capNandOutput	WLNewDecoderDriver.h	/^	double capNandInput, capNandOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:WLNewDecoderDriver
capNmosDrain	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain, capInvInput, capInvOutput;$/;"	m	class:ReadCircuit
capNmosDrain	VoltageSenseAmp.h	/^	double capNmosGate, capNmosDrain, capPmosGate, capPmosDrain;$/;"	m	class:VoltageSenseAmp
capNmosDrain	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain;$/;"	m	class:WLDecoderOutput
capNmosGate	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain, capInvInput, capInvOutput;$/;"	m	class:ReadCircuit
capNmosGate	VoltageSenseAmp.h	/^	double capNmosGate, capNmosDrain, capPmosGate, capPmosDrain;$/;"	m	class:VoltageSenseAmp
capNmosGate	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain;$/;"	m	class:WLDecoderOutput
capNor2Input	MaxPooling.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capNor2Input, capNor2Output;$/;"	m	class:MaxPooling
capNor2Output	MaxPooling.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capNor2Input, capNor2Output;$/;"	m	class:MaxPooling
capNorInput	MaxPooling.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capNor2Input, capNor2Output;$/;"	m	class:MaxPooling
capNorInput	ReadCircuit.h	/^	double capDffTgGateN, capDffTgGateP, capDffTgDrain, capDffInvInput, capDffInvOutput, capNorInput, capNorOutput;$/;"	m	class:ReadCircuit
capNorInput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDriverInvInput, capDriverInvOutput;$/;"	m	class:RowDecoder
capNorInput	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain;$/;"	m	class:WLDecoderOutput
capNorOutput	MaxPooling.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capNor2Input, capNor2Output;$/;"	m	class:MaxPooling
capNorOutput	ReadCircuit.h	/^	double capDffTgGateN, capDffTgGateP, capDffTgDrain, capDffInvInput, capDffInvOutput, capNorInput, capNorOutput;$/;"	m	class:ReadCircuit
capNorOutput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDriverInvInput, capDriverInvOutput;$/;"	m	class:RowDecoder
capNorOutput	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain;$/;"	m	class:WLDecoderOutput
capOutputBitlinePrecharger	Precharger.h	/^	double capOutputBitlinePrecharger;$/;"	m	class:Precharger
capOverlap	Technology.h	/^	double capOverlap;		\/* Overlap capacitance, Cover in MASTAR, Unit: F\/m *\/$/;"	m	class:Technology
capPmosDrain	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain, capInvInput, capInvOutput;$/;"	m	class:ReadCircuit
capPmosDrain	VoltageSenseAmp.h	/^	double capNmosGate, capNmosDrain, capPmosGate, capPmosDrain;$/;"	m	class:VoltageSenseAmp
capPmosGate	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain, capInvInput, capInvOutput;$/;"	m	class:ReadCircuit
capPmosGate	VoltageSenseAmp.h	/^	double capNmosGate, capNmosDrain, capPmosGate, capPmosDrain;$/;"	m	class:VoltageSenseAmp
capPolywire	Technology.h	/^	double capPolywire;	\/* Poly wire capacitance, Unit: F\/m *\/$/;"	m	class:Technology
capRepInput	Bus.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:Bus
capRepInput	HTree.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:HTree
capRepOutput	Bus.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:Bus
capRepOutput	HTree.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:HTree
capRow1	SubArray.h	/^	double capRow1;		\/\/ Capacitance of row1 (BL for 1T1R, WL for Cross-point), Unit: F$/;"	m	class:SubArray
capRow2	SubArray.h	/^	double capRow2;		\/\/ Capacitance of row2 (WL for 1T1R), Unit: F$/;"	m	class:SubArray
capS1	VoltageSenseAmp.h	/^	double capS1;$/;"	m	class:VoltageSenseAmp
capSRAMCell	MemCell.h	/^	double capSRAMCell;$/;"	m	class:MemCell
capSRAMCell	Sigmoid.h	/^	double capSRAMCell, capLoad;$/;"	m	class:Sigmoid
capSidewall	Technology.h	/^	double capSidewall;		\/* Junction sidewall capacitance, Cjsw, Unit: F\/m *\/$/;"	m	class:Technology
capTgDrain	Buffer.h	/^	double capTgDrain, capTgGateN, capTgGateP, capInvInput, capInvOutput;$/;"	m	class:Buffer
capTgDrain	DFF.h	/^	double capTgDrain, capTgGateN, capTgGateP, capInvInput, capInvOutput;$/;"	m	class:DFF
capTgDrain	DeMux.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DeMux
capTgDrain	DecoderDriver.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DecoderDriver
capTgDrain	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:Mux
capTgDrain	NewMux.h	/^	double capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:NewMux
capTgDrain	NewSwitchMatrix.h	/^	double capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:NewSwitchMatrix
capTgDrain	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain, capInvInput, capInvOutput;$/;"	m	class:ReadCircuit
capTgDrain	SwitchMatrix.h	/^	double capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:SwitchMatrix
capTgDrain	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain;$/;"	m	class:WLDecoderOutput
capTgDrain	WLNewDecoderDriver.h	/^	double capNandInput, capNandOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:WLNewDecoderDriver
capTgGateN	Buffer.h	/^	double capTgDrain, capTgGateN, capTgGateP, capInvInput, capInvOutput;$/;"	m	class:Buffer
capTgGateN	DFF.h	/^	double capTgDrain, capTgGateN, capTgGateP, capInvInput, capInvOutput;$/;"	m	class:DFF
capTgGateN	DeMux.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DeMux
capTgGateN	DecoderDriver.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DecoderDriver
capTgGateN	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:Mux
capTgGateN	NewMux.h	/^	double capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:NewMux
capTgGateN	NewSwitchMatrix.h	/^	double capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:NewSwitchMatrix
capTgGateN	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain, capInvInput, capInvOutput;$/;"	m	class:ReadCircuit
capTgGateN	SwitchMatrix.h	/^	double capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:SwitchMatrix
capTgGateN	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain;$/;"	m	class:WLDecoderOutput
capTgGateN	WLNewDecoderDriver.h	/^	double capNandInput, capNandOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:WLNewDecoderDriver
capTgGateP	Buffer.h	/^	double capTgDrain, capTgGateN, capTgGateP, capInvInput, capInvOutput;$/;"	m	class:Buffer
capTgGateP	DFF.h	/^	double capTgDrain, capTgGateN, capTgGateP, capInvInput, capInvOutput;$/;"	m	class:DFF
capTgGateP	DeMux.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DeMux
capTgGateP	DecoderDriver.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DecoderDriver
capTgGateP	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:Mux
capTgGateP	NewMux.h	/^	double capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:NewMux
capTgGateP	NewSwitchMatrix.h	/^	double capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:NewSwitchMatrix
capTgGateP	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain, capInvInput, capInvOutput;$/;"	m	class:ReadCircuit
capTgGateP	SwitchMatrix.h	/^	double capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:SwitchMatrix
capTgGateP	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain;$/;"	m	class:WLDecoderOutput
capTgGateP	WLNewDecoderDriver.h	/^	double capNandInput, capNandOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain;$/;"	m	class:WLNewDecoderDriver
capWireLoadPerColumn	Precharger.h	/^	double capWireLoadPerColumn, resWireLoadPerColumn;$/;"	m	class:Precharger
cell	Adder.h	/^	const MemCell& cell;$/;"	m	class:Adder
cell	AdderTree.h	/^	const MemCell& cell;$/;"	m	class:AdderTree
cell	BitShifter.h	/^	const MemCell& cell;$/;"	m	class:BitShifter
cell	Buffer.h	/^	const MemCell& cell;$/;"	m	class:Buffer
cell	Bus.h	/^	const MemCell& cell;$/;"	m	class:Bus
cell	Comparator.h	/^	const MemCell& cell;$/;"	m	class:Comparator
cell	CurrentSenseAmp.h	/^	const MemCell& cell;$/;"	m	class:CurrentSenseAmp
cell	DFF.h	/^	const MemCell& cell;$/;"	m	class:DFF
cell	DeMux.h	/^	const MemCell& cell;$/;"	m	class:DeMux
cell	DecoderDriver.h	/^	const MemCell& cell;$/;"	m	class:DecoderDriver
cell	Definition.h	/^MemCell cell;$/;"	v
cell	HTree.h	/^	const MemCell& cell;$/;"	m	class:HTree
cell	LevelShifter.h	/^	const MemCell& cell;$/;"	m	class:LevelShifter
cell	MaxPooling.h	/^	const MemCell& cell;$/;"	m	class:MaxPooling
cell	MultilevelSAEncoder.h	/^	const MemCell& cell;$/;"	m	class:MultilevelSAEncoder
cell	MultilevelSenseAmp.h	/^	const MemCell& cell;$/;"	m	class:MultilevelSenseAmp
cell	Mux.h	/^	const MemCell& cell;$/;"	m	class:Mux
cell	NewMux.h	/^	const MemCell& cell;$/;"	m	class:NewMux
cell	NewSwitchMatrix.h	/^	const MemCell& cell;$/;"	m	class:NewSwitchMatrix
cell	Precharger.h	/^	const MemCell& cell;$/;"	m	class:Precharger
cell	ReadCircuit.h	/^	const MemCell& cell;$/;"	m	class:ReadCircuit
cell	RowDecoder.h	/^	const MemCell& cell;$/;"	m	class:RowDecoder
cell	SRAMWriteDriver.h	/^	const MemCell& cell;$/;"	m	class:SRAMWriteDriver
cell	SarADC.h	/^	const MemCell& cell;$/;"	m	class:SarADC
cell	SenseAmp.h	/^	const MemCell& cell;$/;"	m	class:SenseAmp
cell	ShiftAdd.h	/^	const MemCell& cell;$/;"	m	class:ShiftAdd
cell	Sigmoid.h	/^	const MemCell& cell;$/;"	m	class:Sigmoid
cell	SramNewSA.h	/^	const MemCell& cell;$/;"	m	class:SramNewSA
cell	SubArray.h	/^	MemCell& cell;$/;"	m	class:SubArray
cell	SwitchMatrix.h	/^	const MemCell& cell;$/;"	m	class:SwitchMatrix
cell	VoltageSenseAmp.h	/^	const MemCell& cell;$/;"	m	class:VoltageSenseAmp
cell	WLDecoderOutput.h	/^	const MemCell& cell;$/;"	m	class:WLDecoderOutput
cell	WLNewDecoderDriver.h	/^	const MemCell& cell;$/;"	m	class:WLNewDecoderDriver
cellBit	Param.h	/^	int cellBit, synapseBit;$/;"	m	class:Param
chipActivation	Param.h	/^	bool globalBufferType, tileBufferType, peBufferType, chipActivation, reLu, novelMapping, pipeline, SARADC, currentMode, validated, synchronous;$/;"	m	class:Param
clkFreq	Adder.h	/^	double clkFreq;$/;"	m	class:Adder
clkFreq	AdderTree.h	/^	double clkFreq;$/;"	m	class:AdderTree
clkFreq	BitShifter.h	/^	double clkFreq;$/;"	m	class:BitShifter
clkFreq	Buffer.h	/^	double unitWireRes, clkFreq, lengthRow, lengthCol, memoryArea, hDff, wDff, colDelay;$/;"	m	class:Buffer
clkFreq	Bus.h	/^	double clkFreq;$/;"	m	class:Bus
clkFreq	CurrentSenseAmp.h	/^	double clkFreq, Rref;$/;"	m	class:CurrentSenseAmp
clkFreq	DFF.h	/^	double clkFreq;$/;"	m	class:DFF
clkFreq	HTree.h	/^	double clkFreq;$/;"	m	class:HTree
clkFreq	LevelShifter.h	/^	double clkFreq;$/;"	m	class:LevelShifter
clkFreq	MaxPooling.h	/^	double clkFreq;$/;"	m	class:MaxPooling
clkFreq	MultilevelSenseAmp.h	/^	double clkFreq;$/;"	m	class:MultilevelSenseAmp
clkFreq	NewSwitchMatrix.h	/^	double clkFreq;$/;"	m	class:NewSwitchMatrix
clkFreq	Param.h	/^	double clkFreq, featuresize, readNoise, resistanceOn, resistanceOff, maxConductance, minConductance;$/;"	m	class:Param
clkFreq	ReadCircuit.h	/^	double clkFreq;$/;"	m	class:ReadCircuit
clkFreq	SarADC.h	/^	double clkFreq, areaUnit;$/;"	m	class:SarADC
clkFreq	SenseAmp.h	/^	double clkFreq;$/;"	m	class:SenseAmp
clkFreq	ShiftAdd.h	/^	double clkFreq;$/;"	m	class:ShiftAdd
clkFreq	Sigmoid.h	/^	double clkFreq;$/;"	m	class:Sigmoid
clkFreq	SubArray.h	/^	double clkFreq;			\/\/ Clock frequency (Hz)$/;"	m	class:SubArray
clkFreq	SwitchMatrix.h	/^	double clkFreq;$/;"	m	class:SwitchMatrix
clkFreq	VoltageSenseAmp.h	/^	double clkFreq;$/;"	m	class:VoltageSenseAmp
colDecoder	Sigmoid.h	/^	RowDecoder colDecoder;$/;"	m	class:Sigmoid
colDecoderDriver	Sigmoid.h	/^	DecoderDriver colDecoderDriver;$/;"	m	class:Sigmoid
colDelay	Buffer.h	/^	double unitWireRes, clkFreq, lengthRow, lengthCol, memoryArea, hDff, wDff, colDelay;$/;"	m	class:Buffer
colDelay	SubArray.h	/^	double colDelay;	\/\/ Column delay, Unit: s$/;"	m	class:SubArray
comparator	MaxPooling.h	/^	Comparator comparator;$/;"	m	class:MaxPooling
conventional	typedef.h	/^	conventional,	\/* conventional CMOS *\/$/;"	e	enum:TransistorType
conventionalParallel	Param.h	/^	int XNORparallelMode, XNORsequentialMode, BNNparallelMode, BNNsequentialMode, conventionalParallel, conventionalSequential; $/;"	m	class:Param
conventionalParallel	SubArray.h	/^	bool conventionalParallel;$/;"	m	class:SubArray
conventionalSequential	Param.h	/^	int XNORparallelMode, XNORsequentialMode, BNNparallelMode, BNNsequentialMode, conventionalParallel, conventionalSequential; $/;"	m	class:Param
conventionalSequential	SubArray.h	/^	bool conventionalSequential;	$/;"	m	class:SubArray
currentMode	MultilevelSenseAmp.h	/^	bool currentMode;$/;"	m	class:MultilevelSenseAmp
currentMode	Param.h	/^	bool globalBufferType, tileBufferType, peBufferType, chipActivation, reLu, novelMapping, pipeline, SARADC, currentMode, validated, synchronous;$/;"	m	class:Param
currentMode	SubArray.h	/^	bool currentMode;$/;"	m	class:SubArray
currentOffNmos	Technology.h	/^	double currentOffNmos[101];	\/* NMOS off current (from 300K to 400K), Unit: A\/m *\/$/;"	m	class:Technology
currentOffPmos	Technology.h	/^	double currentOffPmos[101]; \/* PMOS off current (from 300K to 400K), Unit: A\/m *\/$/;"	m	class:Technology
currentOnNmos	Technology.h	/^	double currentOnNmos[101];		\/* NMOS saturation current, Unit: A\/m *\/$/;"	m	class:Technology
currentOnPmos	Technology.h	/^	double currentOnPmos[101];		\/* PMOS saturation current, Unit: A\/m *\/$/;"	m	class:Technology
currentSense	SenseAmp.h	/^	bool currentSense;		\/* Whether the sensing scheme is current-based *\/$/;"	m	class:SenseAmp
currentSenseAmp	MultilevelSenseAmp.h	/^	CurrentSenseAmp currentSenseAmp;$/;"	m	class:MultilevelSenseAmp
current_gmNmos	Technology.h	/^    double current_gmNmos;		\/* NMOS current at 0.7*vdd for gm calculation, Unit: A\/m\/V*\/ $/;"	m	class:Technology
current_gmPmos	Technology.h	/^    double current_gmPmos;		\/* PMOS current at 0.7*vdd for gm calculation, Unit: A\/m\/V*\/ $/;"	m	class:Technology
deMux	SubArray.h	/^	DeMux                    deMux;$/;"	m	class:SubArray
delaytolerance	Bus.h	/^	double busWidth, delaytolerance, unitLengthWireCap, wireLength;$/;"	m	class:Bus
delaytolerance	HTree.h	/^	double busWidth, delaytolerance, unitLengthWireCap, totalWireLength;$/;"	m	class:HTree
delta	Param.h	/^	double alpha, beta, gamma, delta, epsilon, zeta;$/;"	m	class:Param
deviceRoadmap	InputParameter.h	/^	DeviceRoadmap deviceRoadmap;	\/* ITRS roadmap: HP or LSTP *\/$/;"	m	class:InputParameter
deviceRoadmap	Technology.h	/^	DeviceRoadmap deviceRoadmap;	\/* HP or LP *\/$/;"	m	class:Technology
deviceroadmap	Param.h	/^	int operationmode, operationmodeBack, memcelltype, accesstype, transistortype, deviceroadmap;      		$/;"	m	class:Param
dff	BitShifter.h	/^	DFF dff;$/;"	m	class:BitShifter
dff	Buffer.h	/^	DFF dff;$/;"	m	class:Buffer
dff	NewSwitchMatrix.h	/^	DFF dff;$/;"	m	class:NewSwitchMatrix
dff	ShiftAdd.h	/^	DFF dff;$/;"	m	class:ShiftAdd
dff	SubArray.h	/^	DFF                      dff;$/;"	m	class:SubArray
dff	SwitchMatrix.h	/^	DFF dff;$/;"	m	class:SwitchMatrix
dffDynamicEnergy	Buffer.h	/^	double dffDynamicEnergy, readWholeDynamicEnergy, writeWholeDynamicEnergy, avgBitReadDynamicEnergy, avgBitWriteDynamicEnergy;$/;"	m	class:Buffer
diode_access	typedef.h	/^	diode_access,$/;"	e	enum:CellAccessType
effectiveResistanceMultiplier	Technology.h	/^	double effectiveResistanceMultiplier;	\/* Extra resistance due to vdsat *\/$/;"	m	class:Technology
emptyArea	FunctionUnit.h	/^	double emptyArea;		\/* Unit: m^2 *\/$/;"	m	class:FunctionUnit
enableLatency	Precharger.h	/^	double enableLatency;$/;"	m	class:Precharger
epsilon	Param.h	/^	double alpha, beta, gamma, delta, epsilon, zeta;$/;"	m	class:Param
featureSize	MemCell.h	/^	double featureSize;$/;"	m	class:MemCell
featureSize	Technology.h	/^	double featureSize;	\/* Process feature size, Unit: m *\/$/;"	m	class:Technology
featureSizeInNano	Technology.h	/^	int featureSizeInNano; \/*Process feature size, Unit: nm *\/$/;"	m	class:Technology
featuresize	Param.h	/^	double clkFreq, featuresize, readNoise, resistanceOn, resistanceOff, maxConductance, minConductance;$/;"	m	class:Param
find_stage	HTree.h	/^	double find_stage;$/;"	m	class:HTree
gamma	Param.h	/^	double alpha, beta, gamma, delta, epsilon, zeta;$/;"	m	class:Param
gen	Definition.h	/^std::mt19937 gen;$/;"	v
getNetStructure	main.cpp	/^vector<vector<double> > getNetStructure(const string &inputfile) {$/;"	f
givenClkFreq	Buffer.h	/^	bool DDR, givenClkFreq, SRAM;$/;"	m	class:Buffer
globalBuffer	Chip.cpp	/^Buffer *globalBuffer;$/;"	v
globalBufferCoreSizeCol	Param.h	/^	int globalBufferCoreSizeRow, globalBufferCoreSizeCol, tileBufferCoreSizeRow, tileBufferCoreSizeCol;																								$/;"	m	class:Param
globalBufferCoreSizeRow	Param.h	/^	int globalBufferCoreSizeRow, globalBufferCoreSizeCol, tileBufferCoreSizeRow, tileBufferCoreSizeCol;																								$/;"	m	class:Param
globalBufferType	Param.h	/^	bool globalBufferType, tileBufferType, peBufferType, chipActivation, reLu, novelMapping, pipeline, SARADC, currentMode, validated, synchronous;$/;"	m	class:Param
globalBusDelayTolerance	Param.h	/^	double globalBusDelayTolerance, localBusDelayTolerance;$/;"	m	class:Param
globalBusWidth	Chip.cpp	/^double globalBusWidth = 0;$/;"	v
hAdder	Adder.h	/^	double hAdder, wAdder;$/;"	m	class:Adder
hDff	Buffer.h	/^	double unitWireRes, clkFreq, lengthRow, lengthCol, memoryArea, hDff, wDff, colDelay;$/;"	m	class:Buffer
hDff	DFF.h	/^	double hDff, wDff;$/;"	m	class:DFF
hDff	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit
hDffInv	Buffer.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP, hDffInv, wDffInv;$/;"	m	class:Buffer
hInv	Bus.h	/^	double widthInvN, widthInvP, wInv, hInv, capInvInput, capInvOutput;$/;"	m	class:Bus
hInv	HTree.h	/^	double widthInvN, widthInvP, wInv, hInv, capInvInput, capInvOutput;$/;"	m	class:HTree
hMinInv	Bus.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:Bus
hMinInv	HTree.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:HTree
hNmosL	CurrentSenseAmp.h	/^	double hNmosL, wNmosL, hNmosS, wNmosS, hNmosM, wNmosM;$/;"	m	class:CurrentSenseAmp
hNmosM	CurrentSenseAmp.h	/^	double hNmosL, wNmosL, hNmosS, wNmosS, hNmosM, wNmosM;$/;"	m	class:CurrentSenseAmp
hNmosS	CurrentSenseAmp.h	/^	double hNmosL, wNmosL, hNmosS, wNmosS, hNmosM, wNmosM;$/;"	m	class:CurrentSenseAmp
hReadBody	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit
hRep	Bus.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:Bus
hRep	HTree.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:HTree
hTreeCM	Tile.cpp	/^HTree *hTreeCM;$/;"	v
hTreeNM	Tile.cpp	/^HTree *hTreeNM;$/;"	v
hUnit	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit
hUnit	Sigmoid.h	/^	double hUnit, wUnit, areaUnit;$/;"	m	class:Sigmoid
height	FunctionUnit.h	/^	double height;		\/* Unit: m *\/$/;"	m	class:FunctionUnit
heightArray	SubArray.h	/^	double heightArray;$/;"	m	class:SubArray
heightFin	Technology.h	/^	double heightFin;	\/* Fin height, Unit: m *\/$/;"	m	class:Technology
heightInFeatureSize	MemCell.h	/^	double heightInFeatureSize;	\/* Cell height, Unit: F *\/$/;"	m	class:MemCell
heightInFeatureSize1T1R	Param.h	/^	double heightInFeatureSize1T1R, widthInFeatureSize1T1R, heightInFeatureSizeCrossbar, widthInFeatureSizeCrossbar;$/;"	m	class:Param
heightInFeatureSizeCrossbar	Param.h	/^	double heightInFeatureSize1T1R, widthInFeatureSize1T1R, heightInFeatureSizeCrossbar, widthInFeatureSizeCrossbar;$/;"	m	class:Param
heightInFeatureSizeSRAM	Param.h	/^	double heightInFeatureSizeSRAM, widthInFeatureSizeSRAM, widthSRAMCellNMOS, widthSRAMCellPMOS, widthAccessCMOS, minSenseVoltage;$/;"	m	class:Param
hit	HTree.h	/^	int x_center, y_center, hit, skipVer;$/;"	m	class:HTree
horowitz	formula.cpp	/^double horowitz(double tr, double beta, double rampInput, double *rampOutput) {$/;"	f
initialized	Adder.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:Adder
initialized	AdderTree.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:AdderTree
initialized	BitShifter.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:BitShifter
initialized	Buffer.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:Buffer
initialized	Bus.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:Bus
initialized	Comparator.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:Comparator
initialized	CurrentSenseAmp.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:CurrentSenseAmp
initialized	DFF.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:DFF
initialized	DeMux.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:DeMux
initialized	DecoderDriver.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:DecoderDriver
initialized	HTree.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:HTree
initialized	LevelShifter.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:LevelShifter
initialized	MaxPooling.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:MaxPooling
initialized	MultilevelSAEncoder.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:MultilevelSAEncoder
initialized	MultilevelSenseAmp.h	/^	bool initialized;		\/* Initialization flag *\/$/;"	m	class:MultilevelSenseAmp
initialized	Mux.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:Mux
initialized	NewMux.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:NewMux
initialized	NewSwitchMatrix.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:NewSwitchMatrix
initialized	Precharger.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:Precharger
initialized	ReadCircuit.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:ReadCircuit
initialized	RowDecoder.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:RowDecoder
initialized	SRAMWriteDriver.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:SRAMWriteDriver
initialized	SarADC.h	/^	bool initialized;		\/* Initialization flag *\/$/;"	m	class:SarADC
initialized	SenseAmp.h	/^	bool initialized;		\/* Initialization flag *\/$/;"	m	class:SenseAmp
initialized	ShiftAdd.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:ShiftAdd
initialized	Sigmoid.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:Sigmoid
initialized	SramNewSA.h	/^	bool initialized;		\/* Initialization flag *\/$/;"	m	class:SramNewSA
initialized	SubArray.h	/^	bool initialized;	   \/\/ Initialization flag$/;"	m	class:SubArray
initialized	SwitchMatrix.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:SwitchMatrix
initialized	Technology.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:Technology
initialized	VoltageSenseAmp.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:VoltageSenseAmp
initialized	WLDecoderOutput.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:WLDecoderOutput
initialized	WLNewDecoderDriver.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:WLNewDecoderDriver
inputBufferCM	Tile.cpp	/^Buffer *inputBufferCM;$/;"	v
inputBufferNM	Tile.cpp	/^Buffer *inputBufferNM;$/;"	v
inputParameter	Adder.h	/^	const InputParameter& inputParameter;$/;"	m	class:Adder
inputParameter	AdderTree.h	/^	const InputParameter& inputParameter;$/;"	m	class:AdderTree
inputParameter	BitShifter.h	/^	const InputParameter& inputParameter;$/;"	m	class:BitShifter
inputParameter	Buffer.h	/^	const InputParameter& inputParameter;$/;"	m	class:Buffer
inputParameter	Bus.h	/^	const InputParameter& inputParameter;$/;"	m	class:Bus
inputParameter	Comparator.h	/^	const InputParameter& inputParameter;$/;"	m	class:Comparator
inputParameter	CurrentSenseAmp.h	/^	const InputParameter& inputParameter;$/;"	m	class:CurrentSenseAmp
inputParameter	DFF.h	/^	const InputParameter& inputParameter;$/;"	m	class:DFF
inputParameter	DeMux.h	/^	const InputParameter& inputParameter;$/;"	m	class:DeMux
inputParameter	DecoderDriver.h	/^	const InputParameter& inputParameter;$/;"	m	class:DecoderDriver
inputParameter	Definition.h	/^InputParameter inputParameter;$/;"	v
inputParameter	HTree.h	/^	const InputParameter& inputParameter;$/;"	m	class:HTree
inputParameter	LevelShifter.h	/^	const InputParameter& inputParameter;$/;"	m	class:LevelShifter
inputParameter	MaxPooling.h	/^	const InputParameter& inputParameter;$/;"	m	class:MaxPooling
inputParameter	MultilevelSAEncoder.h	/^	const InputParameter& inputParameter;$/;"	m	class:MultilevelSAEncoder
inputParameter	MultilevelSenseAmp.h	/^	const InputParameter& inputParameter;$/;"	m	class:MultilevelSenseAmp
inputParameter	Mux.h	/^	const InputParameter& inputParameter;$/;"	m	class:Mux
inputParameter	NewMux.h	/^	const InputParameter& inputParameter;$/;"	m	class:NewMux
inputParameter	NewSwitchMatrix.h	/^	const InputParameter& inputParameter;$/;"	m	class:NewSwitchMatrix
inputParameter	Precharger.h	/^	const InputParameter& inputParameter;$/;"	m	class:Precharger
inputParameter	ReadCircuit.h	/^	const InputParameter& inputParameter;$/;"	m	class:ReadCircuit
inputParameter	RowDecoder.h	/^	const InputParameter& inputParameter;$/;"	m	class:RowDecoder
inputParameter	SRAMWriteDriver.h	/^	const InputParameter& inputParameter;$/;"	m	class:SRAMWriteDriver
inputParameter	SarADC.h	/^	const InputParameter& inputParameter;$/;"	m	class:SarADC
inputParameter	SenseAmp.h	/^	const InputParameter& inputParameter;$/;"	m	class:SenseAmp
inputParameter	ShiftAdd.h	/^	const InputParameter& inputParameter;$/;"	m	class:ShiftAdd
inputParameter	Sigmoid.h	/^	const InputParameter& inputParameter;$/;"	m	class:Sigmoid
inputParameter	SramNewSA.h	/^	const InputParameter& inputParameter;$/;"	m	class:SramNewSA
inputParameter	SubArray.h	/^	InputParameter& inputParameter;$/;"	m	class:SubArray
inputParameter	SwitchMatrix.h	/^	const InputParameter& inputParameter;$/;"	m	class:SwitchMatrix
inputParameter	VoltageSenseAmp.h	/^	const InputParameter& inputParameter;$/;"	m	class:VoltageSenseAmp
inputParameter	WLDecoderOutput.h	/^	const InputParameter& inputParameter;$/;"	m	class:WLDecoderOutput
inputParameter	WLNewDecoderDriver.h	/^	const InputParameter& inputParameter;$/;"	m	class:WLNewDecoderDriver
interface_width	Buffer.h	/^	int numBit, interface_width, num_interface;$/;"	m	class:Buffer
invalid	CurrentSenseAmp.h	/^	bool invalid;		\/* Indicate that the current configuration is not valid *\/$/;"	m	class:CurrentSenseAmp
invalid	WLNewDecoderDriver.h	/^	bool invalid;      \/*Invalidatio flag *\/$/;"	m	class:WLNewDecoderDriver
layoutWidth	ShiftAdd.h	/^	double layoutWidth;$/;"	m	class:ShiftAdd
leakage	FunctionUnit.h	/^	double leakage;		\/* Unit: W *\/$/;"	m	class:FunctionUnit
lengthCol	Buffer.h	/^	double unitWireRes, clkFreq, lengthRow, lengthCol, memoryArea, hDff, wDff, colDelay;$/;"	m	class:Buffer
lengthCol	SubArray.h	/^	double lengthCol;	\/\/ Length of columns, Unit: m$/;"	m	class:SubArray
lengthRow	Buffer.h	/^	double unitWireRes, clkFreq, lengthRow, lengthCol, memoryArea, hDff, wDff, colDelay;$/;"	m	class:Buffer
lengthRow	SubArray.h	/^	double lengthRow;	\/\/ Length of rows, Unit: m$/;"	m	class:SubArray
levelOutput	MultilevelSenseAmp.h	/^    int levelOutput;$/;"	m	class:MultilevelSenseAmp
levelOutput	Param.h	/^	int numlut, numColMuxed, numWriteColMuxed, levelOutput, avgWeightBit, numBitInput;$/;"	m	class:Param
levelOutput	SarADC.h	/^    int levelOutput;$/;"	m	class:SarADC
levelOutput	SramNewSA.h	/^	int levelOutput;	$/;"	m	class:SramNewSA
levelOutput	SubArray.h	/^	int levelOutput;$/;"	m	class:SubArray
levelOutputTrans	SubArray.h	/^	int levelOutputTrans, numRowMuxedTrans, numReadPulseTrans;$/;"	m	class:SubArray
localBusDelayTolerance	Param.h	/^	double globalBusDelayTolerance, localBusDelayTolerance;$/;"	m	class:Param
main	main.cpp	/^int main(int argc, char * argv[]) {   $/;"	f
maxConductance	Param.h	/^	double clkFreq, featuresize, readNoise, resistanceOn, resistanceOff, maxConductance, minConductance;$/;"	m	class:Param
maxGlobalBusWidth	Param.h	/^	double treeFoldedRatio, maxGlobalBusWidth;$/;"	m	class:Param
maxNumIntBit	ReadCircuit.h	/^	int maxNumIntBit;$/;"	m	class:ReadCircuit
maxNumIntBit	SubArray.h	/^	int maxNumIntBit;		\/\/ Max # bits for the integrate-and-fire neuron$/;"	m	class:SubArray
maxNumIntPerCycle	ReadCircuit.h	/^	double maxNumIntPerCycle;$/;"	m	class:ReadCircuit
maxNumLevelLTD	MemCell.h	/^	int maxNumLevelLTP, maxNumLevelLTD;$/;"	m	class:MemCell
maxNumLevelLTD	Param.h	/^	double maxNumLevelLTP, maxNumLevelLTD, readVoltage, readPulseWidth, writeVoltage;$/;"	m	class:Param
maxNumLevelLTP	MemCell.h	/^	int maxNumLevelLTP, maxNumLevelLTD;$/;"	m	class:MemCell
maxNumLevelLTP	Param.h	/^	double maxNumLevelLTP, maxNumLevelLTD, readVoltage, readPulseWidth, writeVoltage;$/;"	m	class:Param
maxNumWritePulse	SubArray.h	/^	int maxNumWritePulse;	\/\/ Max # of write pulses for the device$/;"	m	class:SubArray
maxPool	Chip.cpp	/^MaxPooling *maxPool;$/;"	v
memCellType	MemCell.h	/^	Type::MemCellType memCellType;	\/* Memory cell type (like MRAM, PCRAM, etc.) *\/$/;"	m	class:MemCell
memcelltype	Param.h	/^	int operationmode, operationmodeBack, memcelltype, accesstype, transistortype, deviceroadmap;      		$/;"	m	class:Param
memoryArea	Buffer.h	/^	double unitWireRes, clkFreq, lengthRow, lengthCol, memoryArea, hDff, wDff, colDelay;$/;"	m	class:Buffer
minConductance	Param.h	/^	double clkFreq, featuresize, readNoise, resistanceOn, resistanceOff, maxConductance, minConductance;$/;"	m	class:Param
minDelay	Bus.h	/^	double AR, Rho, unitLengthWireResistance, minDist, minDelay, resOnRep;$/;"	m	class:Bus
minDelay	HTree.h	/^	double numStage, numTree, AR, Rho, unitLengthWireResistance, minDist, minDelay, resOnRep;$/;"	m	class:HTree
minDist	Bus.h	/^	double AR, Rho, unitLengthWireResistance, minDist, minDelay, resOnRep;$/;"	m	class:Bus
minDist	HTree.h	/^	double numStage, numTree, AR, Rho, unitLengthWireResistance, minDist, minDelay, resOnRep;$/;"	m	class:HTree
minDriverCurrent	Mux.h	/^	double minDriverCurrent;$/;"	m	class:Mux
minSenseVoltage	MemCell.h	/^	double minSenseVoltage; \/* Minimum sense voltage *\/$/;"	m	class:MemCell
minSenseVoltage	Param.h	/^	double heightInFeatureSizeSRAM, widthInFeatureSizeSRAM, widthSRAMCellNMOS, widthSRAMCellPMOS, widthAccessCMOS, minSenseVoltage;$/;"	m	class:Param
mode	Bus.h	/^	BusMode mode;$/;"	m	class:Bus
mode	DecoderDriver.h	/^	int mode;$/;"	m	class:DecoderDriver
mode	LevelShifter.h	/^	int mode;$/;"	m	class:LevelShifter
mode	NewSwitchMatrix.h	/^	int mode;$/;"	m	class:NewSwitchMatrix
mode	ReadCircuit.h	/^	ReadCircuitMode mode;$/;"	m	class:ReadCircuit
mode	RowDecoder.h	/^	DecoderMode mode;	\/\/ ROW or COLUMN mode$/;"	m	class:RowDecoder
mode	SwitchMatrix.h	/^	int mode;$/;"	m	class:SwitchMatrix
multifunctional	Param.h	/^	int neuro, multifunctional, parallelWrite, parallelRead;$/;"	m	class:Param
multifunctional	SubArray.h	/^	bool multifunctional;	\/\/ Multifunctional memory$/;"	m	class:SubArray
multifunctional	WLDecoderOutput.h	/^	bool multifunctional;$/;"	m	class:WLDecoderOutput
multifunctional	WLNewDecoderDriver.h	/^	bool multifunctional;$/;"	m	class:WLNewDecoderDriver
multilevelSAEncoder	SubArray.h	/^	MultilevelSAEncoder      multilevelSAEncoder;$/;"	m	class:SubArray
multilevelSenseAmp	SubArray.h	/^	MultilevelSenseAmp       multilevelSenseAmp;$/;"	m	class:SubArray
multipleCells	MemCell.h	/^	int multipleCells;	\/* Use multiple cells as one weight element to reduce the variation (only layout now) *\/$/;"	m	class:MemCell
multipleCells	Param.h	/^	int temp, technode, wireWidth, multipleCells;$/;"	m	class:Param
mux	Sigmoid.h	/^	Mux mux;$/;"	m	class:Sigmoid
mux	SubArray.h	/^	Mux                      mux;$/;"	m	class:SubArray
muxDecoder	Sigmoid.h	/^	RowDecoder muxDecoder;$/;"	m	class:Sigmoid
muxDecoder	SubArray.h	/^	RowDecoder               muxDecoder;$/;"	m	class:SubArray
neuro	LevelShifter.h	/^	bool neuro;$/;"	m	class:LevelShifter
neuro	MultilevelSenseAmp.h	/^	bool neuro;$/;"	m	class:MultilevelSenseAmp
neuro	NewSwitchMatrix.h	/^	bool neuro;$/;"	m	class:NewSwitchMatrix
neuro	Param.h	/^	int neuro, multifunctional, parallelWrite, parallelRead;$/;"	m	class:Param
neuro	SarADC.h	/^	bool neuro;$/;"	m	class:SarADC
neuro	SubArray.h	/^	bool neuro;				\/\/ Neuro mode$/;"	m	class:SubArray
neuro	SwitchMatrix.h	/^	bool neuro;$/;"	m	class:SwitchMatrix
neuro	WLDecoderOutput.h	/^	bool neuro;$/;"	m	class:WLDecoderOutput
neuro	WLNewDecoderDriver.h	/^	bool neuro;$/;"	m	class:WLNewDecoderDriver
neuroSimReadSimulation	SubArray.h	/^	bool neuroSimReadSimulation;$/;"	m	class:SubArray
newHeight	FunctionUnit.h	/^	double newWidth, newHeight;$/;"	m	class:FunctionUnit
newWidth	FunctionUnit.h	/^	double newWidth, newHeight;$/;"	m	class:FunctionUnit
none_access	typedef.h	/^	none_access$/;"	e	enum:CellAccessType
nonlinearIV	MemCell.h	/^	bool nonlinearIV;	\/* Consider I-V nonlinearity or not (Currently this option is for cross-point array. It is hard to have this option in pseudo-crossbar since it has an access transistor and the transistor's resistance can be comparable to RRAM's resistance after considering the nonlinearity. In this case, we have to iteratively find both the resistance and Vw across RRAM.) *\/$/;"	m	class:MemCell
nonlinearIV	Param.h	/^	double nonlinearIV, nonlinearity;$/;"	m	class:Param
nonlinearity	MemCell.h	/^	double nonlinearity;	\/* Current at write voltage \/ current at 1\/2 write voltage *\/$/;"	m	class:MemCell
nonlinearity	Param.h	/^	double nonlinearIV, nonlinearity;$/;"	m	class:Param
novelMapping	Param.h	/^	bool globalBufferType, tileBufferType, peBufferType, chipActivation, reLu, novelMapping, pipeline, SARADC, currentMode, validated, synchronous;$/;"	m	class:Param
numAdder	Adder.h	/^	int numAdder;$/;"	m	class:Adder
numAdder	ShiftAdd.h	/^	int numInv, numNand, numAdder, numDff;$/;"	m	class:ShiftAdd
numAdderBit	AdderTree.h	/^	int numAdderBit;                      \/\/ # of input bits of the Adder$/;"	m	class:AdderTree
numAdderBit	ShiftAdd.h	/^	int numAdderBit, numBitPerDff;$/;"	m	class:ShiftAdd
numAdderTree	AdderTree.h	/^	int numAdderTree;                     \/\/ # of Adder Tree$/;"	m	class:AdderTree
numAddrRow	RowDecoder.h	/^	int numAddrRow;		\/* Number of rows *\/$/;"	m	class:RowDecoder
numBit	Adder.h	/^	int numBit;$/;"	m	class:Adder
numBit	BitShifter.h	/^	int numBit;$/;"	m	class:BitShifter
numBit	Buffer.h	/^	int numBit, interface_width, num_interface;$/;"	m	class:Buffer
numBit	Comparator.h	/^	int numBit;$/;"	m	class:Comparator
numBit	MaxPooling.h	/^	int numBit, window, numMaxPooling, numStage;$/;"	m	class:MaxPooling
numBitInput	Param.h	/^	int numlut, numColMuxed, numWriteColMuxed, levelOutput, avgWeightBit, numBitInput;$/;"	m	class:Param
numBitPerDff	ShiftAdd.h	/^	int numAdderBit, numBitPerDff;$/;"	m	class:ShiftAdd
numBufferCore	Chip.cpp	/^int numBufferCore = 0;				  $/;"	v
numCell	Sigmoid.h	/^	int numCell;$/;"	m	class:Sigmoid
numCellPerSynapse	SubArray.h	/^	int numCellPerSynapse;$/;"	m	class:SubArray
numCol	Bus.h	/^	int numRow, numCol, numRepeater, repeaterSize;$/;"	m	class:Bus
numCol	CurrentSenseAmp.h	/^	int numCol;		\/* Number of columns *\/$/;"	m	class:CurrentSenseAmp
numCol	HTree.h	/^	int numRow, numCol, numRepeater, numTotalRepeater, repeaterSize;$/;"	m	class:HTree
numCol	MultilevelSenseAmp.h	/^	int numCol;				\/* Number of columns *\/$/;"	m	class:MultilevelSenseAmp
numCol	Precharger.h	/^	int numCol;			\/* Number of columns *\/$/;"	m	class:Precharger
numCol	SRAMWriteDriver.h	/^	int numCol;			\/* Number of columns *\/$/;"	m	class:SRAMWriteDriver
numCol	SarADC.h	/^	int numCol;				\/* Number of columns *\/$/;"	m	class:SarADC
numCol	SenseAmp.h	/^	int numCol;				\/* Number of columns *\/$/;"	m	class:SenseAmp
numCol	SramNewSA.h	/^	int numCol;				\/* Number of columns *\/$/;"	m	class:SramNewSA
numCol	SubArray.h	/^	int numCol;			   \/\/ Number of columns$/;"	m	class:SubArray
numColInv	RowDecoder.h	/^	int numColNor, numNorPerCol, numColNand, numNandPerCol, numColInv, numInvPerCol;$/;"	m	class:RowDecoder
numColMuxed	Param.h	/^	int numlut, numColMuxed, numWriteColMuxed, levelOutput, avgWeightBit, numBitInput;$/;"	m	class:Param
numColMuxed	SubArray.h	/^	int numColMuxed;	   \/\/ How many columns share 1 read circuit (for neuro mode with analog RRAM) or 1 S\/A (for memory mode or neuro mode with digital RRAM)$/;"	m	class:SubArray
numColNand	RowDecoder.h	/^	int numColNor, numNorPerCol, numColNand, numNandPerCol, numColInv, numInvPerCol;$/;"	m	class:RowDecoder
numColNor	RowDecoder.h	/^	int numColNor, numNorPerCol, numColNand, numNandPerCol, numColInv, numInvPerCol;$/;"	m	class:RowDecoder
numColPerSynapse	Param.h	/^	int numRowPerSynapse, numColPerSynapse;$/;"	m	class:Param
numColSubArray	Param.h	/^	int numRowSubArray, numColSubArray;$/;"	m	class:Param
numColTg	DecoderDriver.h	/^	int numRowTg, numColTg;$/;"	m	class:DecoderDriver
numColTg	LevelShifter.h	/^	int numRowTg, numColTg;$/;"	m	class:LevelShifter
numColTg	NewSwitchMatrix.h	/^	int numRowTg, numColTg;$/;"	m	class:NewSwitchMatrix
numColTgPair	SwitchMatrix.h	/^	int numRowTgPair, numColTgPair;$/;"	m	class:SwitchMatrix
numComparator	Comparator.h	/^	int numComparator;$/;"	m	class:Comparator
numComparator	MaxPooling.h	/^	int numComparator;$/;"	m	class:MaxPooling
numDff	BitShifter.h	/^	int numDff;$/;"	m	class:BitShifter
numDff	DFF.h	/^	int numDff;			\/* Number of columns *\/$/;"	m	class:DFF
numDff	ReadCircuit.h	/^	int numDff;$/;"	m	class:ReadCircuit
numDff	ShiftAdd.h	/^	int numInv, numNand, numAdder, numDff;$/;"	m	class:ShiftAdd
numEncoder	MultilevelSAEncoder.h	/^	int numEncoder;     \/\/ number of encoder needed$/;"	m	class:MultilevelSAEncoder
numEntry	Sigmoid.h	/^	int numYbit, numEntry;$/;"	m	class:Sigmoid
numFunction	Sigmoid.h	/^	int numFunction;         \/\/ # of sigmoid functions that can be processed in parallel$/;"	m	class:Sigmoid
numGate	MultilevelSAEncoder.h	/^	int numGate;        \/\/ number of NAND gate in encoder $/;"	m	class:MultilevelSAEncoder
numInBufferCore	Tile.cpp	/^int numInBufferCore = 0;$/;"	v
numInput	DeMux.h	/^	int numInput;$/;"	m	class:DeMux
numInput	MultilevelSAEncoder.h	/^	int numInput;       \/\/ number of NAND gate in encoder$/;"	m	class:MultilevelSAEncoder
numInput	Mux.h	/^	int numInput;$/;"	m	class:Mux
numInput	NewMux.h	/^	int numInput;$/;"	m	class:NewMux
numInv	RowDecoder.h	/^	int numInv, numNand, numNor, numMetalConnection;$/;"	m	class:RowDecoder
numInv	ShiftAdd.h	/^	int numInv, numNand, numAdder, numDff;$/;"	m	class:ShiftAdd
numInvPerCol	RowDecoder.h	/^	int numColNor, numNorPerCol, numColNand, numNandPerCol, numColInv, numInvPerCol;$/;"	m	class:RowDecoder
numInvPerRow	RowDecoder.h	/^	int numRowNor, numNorPerRow, numRowNand, numNandPerRow, numRowInv, numInvPerRow;$/;"	m	class:RowDecoder
numLevel	MultilevelSAEncoder.h	/^	int numLevel;       \/\/ number of levels from MultilevelSA$/;"	m	class:MultilevelSAEncoder
numLut	SubArray.h	/^	int numLut; \/\/ Parameter for FPGA$/;"	m	class:SubArray
numMaxPooling	MaxPooling.h	/^	int numBit, window, numMaxPooling, numStage;$/;"	m	class:MaxPooling
numMetalConnection	RowDecoder.h	/^	int numInv, numNand, numNor, numMetalConnection;$/;"	m	class:RowDecoder
numNand	RowDecoder.h	/^	int numInv, numNand, numNor, numMetalConnection;$/;"	m	class:RowDecoder
numNand	ShiftAdd.h	/^	int numInv, numNand, numAdder, numDff;$/;"	m	class:ShiftAdd
numNandPerCol	RowDecoder.h	/^	int numColNor, numNorPerCol, numColNand, numNandPerCol, numColInv, numInvPerCol;$/;"	m	class:RowDecoder
numNandPerRow	RowDecoder.h	/^	int numRowNor, numNorPerRow, numRowNand, numNandPerRow, numRowInv, numInvPerRow;$/;"	m	class:RowDecoder
numNor	RowDecoder.h	/^	int numInv, numNand, numNor, numMetalConnection;$/;"	m	class:RowDecoder
numNorPerCol	RowDecoder.h	/^	int numColNor, numNorPerCol, numColNand, numNandPerCol, numColInv, numInvPerCol;$/;"	m	class:RowDecoder
numNorPerRow	RowDecoder.h	/^	int numRowNor, numNorPerRow, numRowNand, numNandPerRow, numRowInv, numInvPerRow;$/;"	m	class:RowDecoder
numOutBufferCore	Tile.cpp	/^int numOutBufferCore = 0;										 $/;"	v
numOutput	DecoderDriver.h	/^	int numOutput;$/;"	m	class:DecoderDriver
numOutput	LevelShifter.h	/^	int numOutput;$/;"	m	class:LevelShifter
numOutput	NewSwitchMatrix.h	/^	int numOutput;$/;"	m	class:NewSwitchMatrix
numOutput	SwitchMatrix.h	/^	int numOutput;$/;"	m	class:SwitchMatrix
numReadCellPerOperationFPGA	SubArray.h	/^	int numReadCellPerOperationFPGA;    \/\/ Parameter for SRAM$/;"	m	class:SubArray
numReadCellPerOperationMemory	SubArray.h	/^	int numReadCellPerOperationMemory;  \/\/ Parameter for SRAM$/;"	m	class:SubArray
numReadCellPerOperationNeuro	CurrentSenseAmp.h	/^	int numReadCellPerOperationNeuro;$/;"	m	class:CurrentSenseAmp
numReadCellPerOperationNeuro	MultilevelSenseAmp.h	/^	int numReadCellPerOperationNeuro;$/;"	m	class:MultilevelSenseAmp
numReadCellPerOperationNeuro	Precharger.h	/^	int numReadCellPerOperationNeuro;$/;"	m	class:Precharger
numReadCellPerOperationNeuro	SarADC.h	/^	int numReadCellPerOperationNeuro;$/;"	m	class:SarADC
numReadCellPerOperationNeuro	SenseAmp.h	/^	int numReadCellPerOperationNeuro;$/;"	m	class:SenseAmp
numReadCellPerOperationNeuro	SubArray.h	/^	int numReadCellPerOperationNeuro;   \/\/ Parameter for SRAM (use numBitPerCell cells to represent one D)$/;"	m	class:SubArray
numReadCol	ReadCircuit.h	/^	int numReadCol;$/;"	m	class:ReadCircuit
numReadCol	VoltageSenseAmp.h	/^	int numReadCol;$/;"	m	class:VoltageSenseAmp
numReadLutPerOperationFPGA	SubArray.h	/^	int numReadLutPerOperationFPGA; \/\/ parameter for FPGA$/;"	m	class:SubArray
numReadPulse	AdderTree.h	/^	int numReadPulse;$/;"	m	class:AdderTree
numReadPulse	ShiftAdd.h	/^	int numReadPulse;$/;"	m	class:ShiftAdd
numReadPulse	SubArray.h	/^	int numReadPulse;		\/\/ # of read pulses for the input vector$/;"	m	class:SubArray
numReadPulseTrans	SubArray.h	/^	int levelOutputTrans, numRowMuxedTrans, numReadPulseTrans;$/;"	m	class:SubArray
numRep_horizontal	HTree.h	/^	double numRep_vertical, numRep_horizontal;$/;"	m	class:HTree
numRep_vertical	HTree.h	/^	double numRep_vertical, numRep_horizontal;$/;"	m	class:HTree
numRepeater	Bus.h	/^	int numRow, numCol, numRepeater, repeaterSize;$/;"	m	class:Bus
numRepeater	HTree.h	/^	int numRow, numCol, numRepeater, numTotalRepeater, repeaterSize;$/;"	m	class:HTree
numRow	Bus.h	/^	int numRow, numCol, numRepeater, repeaterSize;$/;"	m	class:Bus
numRow	HTree.h	/^	int numRow, numCol, numRepeater, numTotalRepeater, repeaterSize;$/;"	m	class:HTree
numRow	SubArray.h	/^	int numRow;			   \/\/ Number of rows$/;"	m	class:SubArray
numRowInv	RowDecoder.h	/^	int numRowNor, numNorPerRow, numRowNand, numNandPerRow, numRowInv, numInvPerRow;$/;"	m	class:RowDecoder
numRowMuxedTrans	SubArray.h	/^	int levelOutputTrans, numRowMuxedTrans, numReadPulseTrans;$/;"	m	class:SubArray
numRowNand	RowDecoder.h	/^	int numRowNor, numNorPerRow, numRowNand, numNandPerRow, numRowInv, numInvPerRow;$/;"	m	class:RowDecoder
numRowNor	RowDecoder.h	/^	int numRowNor, numNorPerRow, numRowNand, numNandPerRow, numRowInv, numInvPerRow;$/;"	m	class:RowDecoder
numRowPerSynapse	Param.h	/^	int numRowPerSynapse, numColPerSynapse;$/;"	m	class:Param
numRowSubArray	Param.h	/^	int numRowSubArray, numColSubArray;$/;"	m	class:Param
numRowTg	DecoderDriver.h	/^	int numRowTg, numColTg;$/;"	m	class:DecoderDriver
numRowTg	LevelShifter.h	/^	int numRowTg, numColTg;$/;"	m	class:LevelShifter
numRowTg	Mux.h	/^	int numRowTg;$/;"	m	class:Mux
numRowTg	NewSwitchMatrix.h	/^	int numRowTg, numColTg;$/;"	m	class:NewSwitchMatrix
numRowTgPair	NewMux.h	/^	int numRowTgPair;$/;"	m	class:NewMux
numRowTgPair	SwitchMatrix.h	/^	int numRowTgPair, numColTgPair;$/;"	m	class:SwitchMatrix
numRowUnit	ReadCircuit.h	/^	int numUnitPerRow, numRowUnit;$/;"	m	class:ReadCircuit
numSelection	Mux.h	/^	int numSelection;		\/* Number of Selections *\/$/;"	m	class:Mux
numStage	AdderTree.h	/^	int numStage;$/;"	m	class:AdderTree
numStage	HTree.h	/^	double numStage, numTree, AR, Rho, unitLengthWireResistance, minDist, minDelay, resOnRep;$/;"	m	class:HTree
numStage	MaxPooling.h	/^	int numBit, window, numMaxPooling, numStage;$/;"	m	class:MaxPooling
numSubcoreRow	AdderTree.h	/^    int numSubcoreRow;                    \/\/ # of row of subcore in the synaptic core$/;"	m	class:AdderTree
numTotalAdder	AdderTree.h	/^	int numTotalAdder;$/;"	m	class:AdderTree
numTotalRepeater	HTree.h	/^	int numRow, numCol, numRepeater, numTotalRepeater, repeaterSize;$/;"	m	class:HTree
numTree	HTree.h	/^	double numStage, numTree, AR, Rho, unitLengthWireResistance, minDist, minDelay, resOnRep;$/;"	m	class:HTree
numUnit	BitShifter.h	/^	int numUnit;$/;"	m	class:BitShifter
numUnit	ShiftAdd.h	/^	int numUnit;$/;"	m	class:ShiftAdd
numUnitPerRow	ReadCircuit.h	/^	int numUnitPerRow, numRowUnit;$/;"	m	class:ReadCircuit
numWLRow	WLDecoderOutput.h	/^	int numWLRow;$/;"	m	class:WLDecoderOutput
numWLRow	WLNewDecoderDriver.h	/^	int numWLRow;$/;"	m	class:WLNewDecoderDriver
numWriteCellPerOperationFPGA	SubArray.h	/^	int numWriteCellPerOperationFPGA;   \/\/ Parameter for SRAM$/;"	m	class:SubArray
numWriteCellPerOperationMemory	SubArray.h	/^	int numWriteCellPerOperationMemory;$/;"	m	class:SubArray
numWriteCellPerOperationMemory	SwitchMatrix.h	/^	int numWriteCellPerOperationMemory;$/;"	m	class:SwitchMatrix
numWriteCellPerOperationNeuro	LevelShifter.h	/^	int numWriteCellPerOperationNeuro;$/;"	m	class:LevelShifter
numWriteCellPerOperationNeuro	NewSwitchMatrix.h	/^	int numWriteCellPerOperationNeuro;$/;"	m	class:NewSwitchMatrix
numWriteCellPerOperationNeuro	Precharger.h	/^	int numWriteCellPerOperationNeuro;$/;"	m	class:Precharger
numWriteCellPerOperationNeuro	SRAMWriteDriver.h	/^	int numWriteCellPerOperationNeuro;$/;"	m	class:SRAMWriteDriver
numWriteCellPerOperationNeuro	SubArray.h	/^	int numWriteCellPerOperationNeuro;  \/\/ For multifunctional mode or neuro only mode$/;"	m	class:SubArray
numWriteCellPerOperationNeuro	SwitchMatrix.h	/^	int numWriteCellPerOperationNeuro;$/;"	m	class:SwitchMatrix
numWriteColMuxed	Param.h	/^	int numlut, numColMuxed, numWriteColMuxed, levelOutput, avgWeightBit, numBitInput;$/;"	m	class:Param
numWriteColMuxed	SubArray.h	/^	int numWriteColMuxed;	\/\/ \/\/ How many columns share 1 write column decoder driver (for memory or neuro mode with digital RRAM)$/;"	m	class:SubArray
numWritePulse	LevelShifter.h	/^	double numWritePulse;$/;"	m	class:LevelShifter
numWritePulse	NewSwitchMatrix.h	/^	double numWritePulse;$/;"	m	class:NewSwitchMatrix
numWritePulse	Param.h	/^	double writePulseWidth, numWritePulse;$/;"	m	class:Param
numWritePulse	SubArray.h	/^	double numWritePulse;	\/\/ Average number of write pulse$/;"	m	class:SubArray
numWritePulse	SwitchMatrix.h	/^	double numWritePulse;$/;"	m	class:SwitchMatrix
numWritePulseAVG	SubArray.h	/^	int numWritePulseAVG;$/;"	m	class:SubArray
numYbit	Sigmoid.h	/^	int numYbit, numEntry;$/;"	m	class:Sigmoid
num_interface	Buffer.h	/^	int numBit, interface_width, num_interface;$/;"	m	class:Buffer
numlut	Param.h	/^	int numlut, numColMuxed, numWriteColMuxed, levelOutput, avgWeightBit, numBitInput;$/;"	m	class:Param
operationmode	Param.h	/^	int operationmode, operationmodeBack, memcelltype, accesstype, transistortype, deviceroadmap;      		$/;"	m	class:Param
operationmodeBack	Param.h	/^	int operationmode, operationmodeBack, memcelltype, accesstype, transistortype, deviceroadmap;      		$/;"	m	class:Param
outputBufferCM	Tile.cpp	/^Buffer *outputBufferCM;$/;"	v
outputBufferNM	Tile.cpp	/^Buffer *outputBufferNM;$/;"	v
parallel	CurrentSenseAmp.h	/^	bool parallel;$/;"	m	class:CurrentSenseAmp
parallel	MultilevelSenseAmp.h	/^	bool parallel;$/;"	m	class:MultilevelSenseAmp
parallel	RowDecoder.h	/^	bool parallel;    \/\/ for mux decoder of parallel reading mode$/;"	m	class:RowDecoder
parallelRead	Param.h	/^	int neuro, multifunctional, parallelWrite, parallelRead;$/;"	m	class:Param
parallelTrans	SubArray.h	/^	bool trainingEstimation, parallelTrans;$/;"	m	class:SubArray
parallelWrite	LevelShifter.h	/^	bool parallelWrite;$/;"	m	class:LevelShifter
parallelWrite	NewSwitchMatrix.h	/^	bool parallelWrite;$/;"	m	class:NewSwitchMatrix
parallelWrite	Param.h	/^	int neuro, multifunctional, parallelWrite, parallelRead;$/;"	m	class:Param
parallelWrite	SubArray.h	/^	bool parallelWrite; \/\/ Parameter for crossbar RRAM in neuro mode$/;"	m	class:SubArray
parallelWrite	SwitchMatrix.h	/^	bool parallelWrite;$/;"	m	class:SwitchMatrix
param	Definition.h	/^Param *param = new Param(); \/\/ Parameter set$/;"	v
peBufferType	Param.h	/^	bool globalBufferType, tileBufferType, peBufferType, chipActivation, reLu, novelMapping, pipeline, SARADC, currentMode, validated, synchronous;$/;"	m	class:Param
phyGateLength	Technology.h	/^	double phyGateLength;	\/* Physical gate length, Unit: m *\/$/;"	m	class:Technology
pipeline	Param.h	/^	bool globalBufferType, tileBufferType, peBufferType, chipActivation, reLu, novelMapping, pipeline, SARADC, currentMode, validated, synchronous;$/;"	m	class:Param
pitchSenseAmp	SenseAmp.h	/^	double pitchSenseAmp;	\/* The maximum width allowed for one sense amplifier layout *\/$/;"	m	class:SenseAmp
pnSizeRatio	Technology.h	/^	double pnSizeRatio;		\/* PMOS to NMOS size ratio *\/$/;"	m	class:Technology
precharger	Buffer.h	/^	Precharger precharger;$/;"	m	class:Buffer
precharger	SubArray.h	/^	Precharger               precharger;$/;"	m	class:SubArray
processNode	InputParameter.h	/^	int processNode;				\/* Process node (nm) *\/$/;"	m	class:InputParameter
processNode	MemCell.h	/^	int processNode;        \/* Cell original process technology node, Unit: nm*\/$/;"	m	class:MemCell
rampInput	Adder.h	/^	double rampInput, rampOutput;$/;"	m	class:Adder
rampInput	Buffer.h	/^	double rampInput, rampOutput;$/;"	m	class:Buffer
rampInput	Comparator.h	/^	double rampInput, rampOutput;$/;"	m	class:Comparator
rampInput	DFF.h	/^	double rampInput, rampOutput;$/;"	m	class:DFF
rampInput	DeMux.h	/^	double rampInput, rampOutput;$/;"	m	class:DeMux
rampInput	DecoderDriver.h	/^	double rampInput, rampOutput;$/;"	m	class:DecoderDriver
rampInput	LevelShifter.h	/^	double rampInput, rampOutput;$/;"	m	class:LevelShifter
rampInput	MaxPooling.h	/^	double rampInput;$/;"	m	class:MaxPooling
rampInput	MultilevelSAEncoder.h	/^	double rampInput, rampOutput;$/;"	m	class:MultilevelSAEncoder
rampInput	Mux.h	/^	double rampInput, rampOutput;$/;"	m	class:Mux
rampInput	NewMux.h	/^	double rampInput, rampOutput;$/;"	m	class:NewMux
rampInput	NewSwitchMatrix.h	/^	double rampInput, rampOutput;$/;"	m	class:NewSwitchMatrix
rampInput	Precharger.h	/^	double rampInput, rampOutput;$/;"	m	class:Precharger
rampInput	ReadCircuit.h	/^	double rampInput, rampOutput;$/;"	m	class:ReadCircuit
rampInput	RowDecoder.h	/^	double rampInput, rampOutput;$/;"	m	class:RowDecoder
rampInput	SRAMWriteDriver.h	/^	double rampInput, rampOutput;$/;"	m	class:SRAMWriteDriver
rampInput	ShiftAdd.h	/^	double rampInput, rampOutput;$/;"	m	class:ShiftAdd
rampInput	SwitchMatrix.h	/^	double rampInput, rampOutput;$/;"	m	class:SwitchMatrix
rampInput	VoltageSenseAmp.h	/^	double rampInput, rampOutput;$/;"	m	class:VoltageSenseAmp
rampInput	WLDecoderOutput.h	/^	double rampInput, rampOutput;$/;"	m	class:WLDecoderOutput
rampInput	WLNewDecoderDriver.h	/^	double rampInput, rampOutput;$/;"	m	class:WLNewDecoderDriver
rampOutput	Adder.h	/^	double rampInput, rampOutput;$/;"	m	class:Adder
rampOutput	Buffer.h	/^	double rampInput, rampOutput;$/;"	m	class:Buffer
rampOutput	Comparator.h	/^	double rampInput, rampOutput;$/;"	m	class:Comparator
rampOutput	DFF.h	/^	double rampInput, rampOutput;$/;"	m	class:DFF
rampOutput	DeMux.h	/^	double rampInput, rampOutput;$/;"	m	class:DeMux
rampOutput	DecoderDriver.h	/^	double rampInput, rampOutput;$/;"	m	class:DecoderDriver
rampOutput	LevelShifter.h	/^	double rampInput, rampOutput;$/;"	m	class:LevelShifter
rampOutput	MultilevelSAEncoder.h	/^	double rampInput, rampOutput;$/;"	m	class:MultilevelSAEncoder
rampOutput	Mux.h	/^	double rampInput, rampOutput;$/;"	m	class:Mux
rampOutput	NewMux.h	/^	double rampInput, rampOutput;$/;"	m	class:NewMux
rampOutput	NewSwitchMatrix.h	/^	double rampInput, rampOutput;$/;"	m	class:NewSwitchMatrix
rampOutput	Precharger.h	/^	double rampInput, rampOutput;$/;"	m	class:Precharger
rampOutput	ReadCircuit.h	/^	double rampInput, rampOutput;$/;"	m	class:ReadCircuit
rampOutput	RowDecoder.h	/^	double rampInput, rampOutput;$/;"	m	class:RowDecoder
rampOutput	SRAMWriteDriver.h	/^	double rampInput, rampOutput;$/;"	m	class:SRAMWriteDriver
rampOutput	ShiftAdd.h	/^	double rampInput, rampOutput;$/;"	m	class:ShiftAdd
rampOutput	SwitchMatrix.h	/^	double rampInput, rampOutput;$/;"	m	class:SwitchMatrix
rampOutput	VoltageSenseAmp.h	/^	double rampInput, rampOutput;$/;"	m	class:VoltageSenseAmp
rampOutput	WLDecoderOutput.h	/^	double rampInput, rampOutput;$/;"	m	class:WLDecoderOutput
rampOutput	WLNewDecoderDriver.h	/^	double rampInput, rampOutput;$/;"	m	class:WLNewDecoderDriver
reLu	Param.h	/^	bool globalBufferType, tileBufferType, peBufferType, chipActivation, reLu, novelMapping, pipeline, SARADC, currentMode, validated, synchronous;$/;"	m	class:Param
reLuCM	Tile.cpp	/^BitShifter *reLuCM;$/;"	v
reLuNM	Tile.cpp	/^BitShifter *reLuNM;$/;"	v
readCircuit	SubArray.h	/^	ReadCircuit              readCircuit;$/;"	m	class:SubArray
readCircuitMode	SubArray.h	/^	ReadCircuitMode readCircuitMode;$/;"	m	class:SubArray
readDynamicEnergy	FunctionUnit.h	/^	double readDynamicEnergy, writeDynamicEnergy;	\/* Unit: J *\/$/;"	m	class:FunctionUnit
readDynamicEnergyADC	SubArray.h	/^	double areaADC, areaAccum, areaOther, readLatencyADC, readLatencyAccum, readLatencyOther, readDynamicEnergyADC, readDynamicEnergyAccum, readDynamicEnergyOther;$/;"	m	class:SubArray
readDynamicEnergyAccum	SubArray.h	/^	double areaADC, areaAccum, areaOther, readLatencyADC, readLatencyAccum, readLatencyOther, readDynamicEnergyADC, readDynamicEnergyAccum, readDynamicEnergyOther;$/;"	m	class:SubArray
readDynamicEnergyArray	SubArray.h	/^	double readDynamicEnergyArray, writeDynamicEnergyArray;$/;"	m	class:SubArray
readDynamicEnergyOther	SubArray.h	/^	double areaADC, areaAccum, areaOther, readLatencyADC, readLatencyAccum, readLatencyOther, readDynamicEnergyADC, readDynamicEnergyAccum, readDynamicEnergyOther;$/;"	m	class:SubArray
readLatency	FunctionUnit.h	/^	double readLatency, writeLatency;		\/* Unit: s *\/$/;"	m	class:FunctionUnit
readLatencyADC	SubArray.h	/^	double areaADC, areaAccum, areaOther, readLatencyADC, readLatencyAccum, readLatencyOther, readDynamicEnergyADC, readDynamicEnergyAccum, readDynamicEnergyOther;$/;"	m	class:SubArray
readLatencyAccum	SubArray.h	/^	double areaADC, areaAccum, areaOther, readLatencyADC, readLatencyAccum, readLatencyOther, readDynamicEnergyADC, readDynamicEnergyAccum, readDynamicEnergyOther;$/;"	m	class:SubArray
readLatencyOther	SubArray.h	/^	double areaADC, areaAccum, areaOther, readLatencyADC, readLatencyAccum, readLatencyOther, readDynamicEnergyADC, readDynamicEnergyAccum, readDynamicEnergyOther;$/;"	m	class:SubArray
readNoise	Param.h	/^	double clkFreq, featuresize, readNoise, resistanceOn, resistanceOff, maxConductance, minConductance;$/;"	m	class:Param
readPower	FunctionUnit.h	/^	double readPower, writePower;$/;"	m	class:FunctionUnit
readPulseWidth	MemCell.h	/^	double readPulseWidth;$/;"	m	class:MemCell
readPulseWidth	Param.h	/^	double maxNumLevelLTP, maxNumLevelLTD, readVoltage, readPulseWidth, writeVoltage;$/;"	m	class:Param
readVoltage	MemCell.h	/^	double readVoltage;$/;"	m	class:MemCell
readVoltage	Param.h	/^	double maxNumLevelLTP, maxNumLevelLTD, readVoltage, readPulseWidth, writeVoltage;$/;"	m	class:Param
readWholeDynamicEnergy	Buffer.h	/^	double dffDynamicEnergy, readWholeDynamicEnergy, writeWholeDynamicEnergy, avgBitReadDynamicEnergy, avgBitWriteDynamicEnergy;$/;"	m	class:Buffer
readWholeLatency	Buffer.h	/^	double readWholeLatency, writeWholeLatency, avgBitReadLatency, avgBitWriteLatency;$/;"	m	class:Buffer
relaxArrayCellHeight	Param.h	/^	int relaxArrayCellHeight, relaxArrayCellWidth;$/;"	m	class:Param
relaxArrayCellHeight	SubArray.h	/^	bool relaxArrayCellHeight;	\/\/ true: relax the memory cell height to match the height of periperal circuit unit that connects to the row (ex: standard cell height in the last stage of row decoder) if the latter is larger$/;"	m	class:SubArray
relaxArrayCellWidth	Param.h	/^	int relaxArrayCellHeight, relaxArrayCellWidth;$/;"	m	class:Param
relaxArrayCellWidth	SubArray.h	/^	bool relaxArrayCellWidth;	\/\/ true: relax the memory cell width to match the width of periperal circuit unit that connects to the column (ex: pass gate width in the column mux) if the latter is larger$/;"	m	class:SubArray
repeaterSize	Bus.h	/^	int numRow, numCol, numRepeater, repeaterSize;$/;"	m	class:Bus
repeaterSize	HTree.h	/^	int numRow, numCol, numRepeater, numTotalRepeater, repeaterSize;$/;"	m	class:HTree
resCellAccess	MemCell.h	/^	double resCellAccess;$/;"	m	class:MemCell
resCellAccess	SubArray.h	/^	double resCellAccess;	\/\/ Resistance of access device, Unit: ohm$/;"	m	class:SubArray
resCol	SubArray.h	/^	double resCol;		\/\/ Column resistance, Unit: ohm$/;"	m	class:SubArray
resLoad	DecoderDriver.h	/^	double resLoad;	\/* Output resistance, unit: ohm *\/$/;"	m	class:DecoderDriver
resLoad	LevelShifter.h	/^	double resLoad;$/;"	m	class:LevelShifter
resLoad	NewSwitchMatrix.h	/^	double resLoad;$/;"	m	class:NewSwitchMatrix
resLoad	Precharger.h	/^	double capLoad, resLoad;$/;"	m	class:Precharger
resLoad	SRAMWriteDriver.h	/^	double capLoad, resLoad;$/;"	m	class:SRAMWriteDriver
resLoad	SwitchMatrix.h	/^	double resLoad;$/;"	m	class:SwitchMatrix
resLoad	WLDecoderOutput.h	/^	double resLoad;	\/* Output resistance, unit: ohm *\/$/;"	m	class:WLDecoderOutput
resLoad	WLNewDecoderDriver.h	/^	double resLoad;	\/* Output resistance, unit: ohm *\/$/;"	m	class:WLNewDecoderDriver
resMemCellAvg	MemCell.h	/^	double resMemCellAvg;	\/\/ At on-chip Vr (different than the Vr in the reported measurement data)$/;"	m	class:MemCell
resMemCellAvgAtHalfVw	MemCell.h	/^	double resMemCellAvgAtHalfVw;$/;"	m	class:MemCell
resMemCellAvgAtVw	MemCell.h	/^	double resMemCellAvgAtVw;$/;"	m	class:MemCell
resMemCellOff	MemCell.h	/^	double resMemCellOff;	\/\/ At on-chip Vr (different than the Vr in the reported measurement data)$/;"	m	class:MemCell
resMemCellOffAtHalfVw	MemCell.h	/^	double resMemCellOffAtHalfVw;$/;"	m	class:MemCell
resMemCellOffAtVw	MemCell.h	/^	double resMemCellOffAtVw;$/;"	m	class:MemCell
resMemCellOn	MemCell.h	/^	double resMemCellOn;	\/\/ At on-chip Vr (different than the Vr in the reported measurement data)$/;"	m	class:MemCell
resMemCellOnAtHalfVw	MemCell.h	/^	double resMemCellOnAtHalfVw;$/;"	m	class:MemCell
resMemCellOnAtVw	MemCell.h	/^	double resMemCellOnAtVw;$/;"	m	class:MemCell
resOnRep	Bus.h	/^	double AR, Rho, unitLengthWireResistance, minDist, minDelay, resOnRep;$/;"	m	class:Bus
resOnRep	HTree.h	/^	double numStage, numTree, AR, Rho, unitLengthWireResistance, minDist, minDelay, resOnRep;$/;"	m	class:HTree
resPrecharge	VoltageSenseAmp.h	/^	double resPrecharge;$/;"	m	class:VoltageSenseAmp
resRow	SubArray.h	/^	double resRow;		\/\/ Row resistance, Unit: ohm$/;"	m	class:SubArray
resTg	DeMux.h	/^	double resTg;$/;"	m	class:DeMux
resTg	DecoderDriver.h	/^	double resTg;$/;"	m	class:DecoderDriver
resTg	LevelShifter.h	/^	double resTg;$/;"	m	class:LevelShifter
resTg	Mux.h	/^	double resTg;$/;"	m	class:Mux
resTg	NewMux.h	/^	double resTg;$/;"	m	class:NewMux
resTg	NewSwitchMatrix.h	/^	double resTg;$/;"	m	class:NewSwitchMatrix
resTg	SwitchMatrix.h	/^	double resTg;$/;"	m	class:SwitchMatrix
resTg	WLDecoderOutput.h	/^	double resTg;$/;"	m	class:WLDecoderOutput
resTg	WLNewDecoderDriver.h	/^	double resTg;$/;"	m	class:WLNewDecoderDriver
resWireLoadPerColumn	Precharger.h	/^	double capWireLoadPerColumn, resWireLoadPerColumn;$/;"	m	class:Precharger
resistanceAccess	MemCell.h	/^	double resistanceAccess;$/;"	m	class:MemCell
resistanceAccess	Param.h	/^	double accessVoltage, resistanceAccess;$/;"	m	class:Param
resistanceAvg	MemCell.h	/^	double resistanceAvg;$/;"	m	class:MemCell
resistanceOff	MemCell.h	/^	double resistanceOff;	\/* Turn-off resistance *\/$/;"	m	class:MemCell
resistanceOff	Param.h	/^	double clkFreq, featuresize, readNoise, resistanceOn, resistanceOff, maxConductance, minConductance;$/;"	m	class:Param
resistanceOn	MemCell.h	/^	double resistanceOn;	\/* Turn-on resistance *\/$/;"	m	class:MemCell
resistanceOn	Param.h	/^	double clkFreq, featuresize, readNoise, resistanceOn, resistanceOff, maxConductance, minConductance;$/;"	m	class:Param
rowCurrentSenseAmp	SubArray.h	/^	CurrentSenseAmp          rowCurrentSenseAmp;$/;"	m	class:SubArray
rowbyrow	CurrentSenseAmp.h	/^	bool rowbyrow;$/;"	m	class:CurrentSenseAmp
sarADC	SubArray.h	/^	SarADC                   sarADC;$/;"	m	class:SubArray
senseAmp	Buffer.h	/^	SenseAmp senseAmp;$/;"	m	class:Buffer
senseAmp	Sigmoid.h	/^	SenseAmp senseAmp;$/;"	m	class:Sigmoid
senseAmp	SubArray.h	/^	SenseAmp                 senseAmp;$/;"	m	class:SubArray
senseVoltage	SenseAmp.h	/^	double senseVoltage;	\/* Minimum sensible voltage *\/$/;"	m	class:SenseAmp
senseVoltage	Sigmoid.h	/^	double senseVoltage;     \/\/ senseAmp voltage$/;"	m	class:Sigmoid
shiftAdd	SubArray.h	/^	ShiftAdd                 shiftAdd;$/;"	m	class:SubArray
shiftAddEnable	SubArray.h	/^	bool shiftAddEnable;    \/\/ 0 for partition because the shift-and-add circuit will be after the last A&R stage$/;"	m	class:SubArray
sigmoidCM	Tile.cpp	/^Sigmoid *sigmoidCM;$/;"	v
sigmoidNM	Tile.cpp	/^Sigmoid *sigmoidNM;$/;"	v
skipVer	HTree.h	/^	int x_center, y_center, hit, skipVer;$/;"	m	class:HTree
slSwitchMatrix	SubArray.h	/^	SwitchMatrix             slSwitchMatrix;$/;"	m	class:SubArray
sllevelshifter	SubArray.h	/^	LevelShifter			 sllevelshifter;$/;"	m	class:SubArray
speedUpDegree	Param.h	/^	int speedUpDegree;$/;"	m	class:Param
spikingMode	ReadCircuit.h	/^	SpikingMode spikingMode;$/;"	m	class:ReadCircuit
spikingMode	ShiftAdd.h	/^	SpikingMode spikingMode;$/;"	m	class:ShiftAdd
spikingMode	SubArray.h	/^	SpikingMode spikingMode;	\/\/ NONSPIKING: input data using pulses in binary representation$/;"	m	class:SubArray
sramWriteDriver	Buffer.h	/^	SRAMWriteDriver sramWriteDriver;$/;"	m	class:Buffer
sramWriteDriver	SubArray.h	/^	SRAMWriteDriver          sramWriteDriver;$/;"	m	class:SubArray
subArrayInPE	Tile.cpp	/^SubArray *subArrayInPE;$/;"	v
synapseBit	Param.h	/^	int cellBit, synapseBit;$/;"	m	class:Param
synchronous	Param.h	/^	bool globalBufferType, tileBufferType, peBufferType, chipActivation, reLu, novelMapping, pipeline, SARADC, currentMode, validated, synchronous;$/;"	m	class:Param
tech	Adder.h	/^	const Technology& tech;$/;"	m	class:Adder
tech	AdderTree.h	/^	const Technology& tech;$/;"	m	class:AdderTree
tech	BitShifter.h	/^	const Technology& tech;$/;"	m	class:BitShifter
tech	Buffer.h	/^	const Technology& tech;$/;"	m	class:Buffer
tech	Bus.h	/^	const Technology& tech;$/;"	m	class:Bus
tech	Comparator.h	/^	const Technology& tech;$/;"	m	class:Comparator
tech	CurrentSenseAmp.h	/^	const Technology& tech;$/;"	m	class:CurrentSenseAmp
tech	DFF.h	/^	const Technology& tech;$/;"	m	class:DFF
tech	DeMux.h	/^	const Technology& tech;$/;"	m	class:DeMux
tech	DecoderDriver.h	/^	const Technology& tech;$/;"	m	class:DecoderDriver
tech	Definition.h	/^Technology tech;$/;"	v
tech	HTree.h	/^	const Technology& tech;$/;"	m	class:HTree
tech	LevelShifter.h	/^	const Technology& tech;$/;"	m	class:LevelShifter
tech	MaxPooling.h	/^	const Technology& tech;$/;"	m	class:MaxPooling
tech	MultilevelSAEncoder.h	/^	const Technology& tech;$/;"	m	class:MultilevelSAEncoder
tech	MultilevelSenseAmp.h	/^	const Technology& tech;$/;"	m	class:MultilevelSenseAmp
tech	Mux.h	/^	const Technology& tech;$/;"	m	class:Mux
tech	NewMux.h	/^	const Technology& tech;$/;"	m	class:NewMux
tech	NewSwitchMatrix.h	/^	const Technology& tech;$/;"	m	class:NewSwitchMatrix
tech	Precharger.h	/^	const Technology& tech;$/;"	m	class:Precharger
tech	ReadCircuit.h	/^	const Technology& tech;$/;"	m	class:ReadCircuit
tech	RowDecoder.h	/^	const Technology& tech;$/;"	m	class:RowDecoder
tech	SRAMWriteDriver.h	/^	const Technology& tech;$/;"	m	class:SRAMWriteDriver
tech	SarADC.h	/^	const Technology& tech;$/;"	m	class:SarADC
tech	SenseAmp.h	/^	const Technology& tech;$/;"	m	class:SenseAmp
tech	ShiftAdd.h	/^	const Technology& tech;$/;"	m	class:ShiftAdd
tech	Sigmoid.h	/^	const Technology& tech;$/;"	m	class:Sigmoid
tech	SramNewSA.h	/^	const Technology& tech;$/;"	m	class:SramNewSA
tech	SubArray.h	/^	Technology& tech;$/;"	m	class:SubArray
tech	SwitchMatrix.h	/^	const Technology& tech;$/;"	m	class:SwitchMatrix
tech	VoltageSenseAmp.h	/^	const Technology& tech;$/;"	m	class:VoltageSenseAmp
tech	WLDecoderOutput.h	/^	const Technology& tech;$/;"	m	class:WLDecoderOutput
tech	WLNewDecoderDriver.h	/^	const Technology& tech;$/;"	m	class:WLNewDecoderDriver
technode	Param.h	/^	int temp, technode, wireWidth, multipleCells;$/;"	m	class:Param
temp	Param.h	/^	int temp, technode, wireWidth, multipleCells;$/;"	m	class:Param
temperature	InputParameter.h	/^	int temperature;				\/* The ambient temperature, Unit: K *\/$/;"	m	class:InputParameter
tileBufferCoreSizeCol	Param.h	/^	int globalBufferCoreSizeRow, globalBufferCoreSizeCol, tileBufferCoreSizeRow, tileBufferCoreSizeCol;																								$/;"	m	class:Param
tileBufferCoreSizeRow	Param.h	/^	int globalBufferCoreSizeRow, globalBufferCoreSizeCol, tileBufferCoreSizeRow, tileBufferCoreSizeCol;																								$/;"	m	class:Param
tileBufferType	Param.h	/^	bool globalBufferType, tileBufferType, peBufferType, chipActivation, reLu, novelMapping, pipeline, SARADC, currentMode, validated, synchronous;$/;"	m	class:Param
totalArea	FunctionUnit.h	/^	double totalArea;		\/* Unit: m^2 *\/$/;"	m	class:FunctionUnit
totalNumWritePulse	SubArray.h	/^	int totalNumWritePulse;$/;"	m	class:SubArray
totalWireLength	HTree.h	/^	double busWidth, delaytolerance, unitLengthWireCap, totalWireLength;$/;"	m	class:HTree
trainingEstimation	SubArray.h	/^	bool trainingEstimation, parallelTrans;$/;"	m	class:SubArray
transistorType	InputParameter.h	/^	TransistorType transistorType;	\/* Conventional CMOS, 2D FET, or TFET *\/$/;"	m	class:InputParameter
transistorType	Technology.h	/^	TransistorType transistorType;$/;"	m	class:Technology
transistortype	Param.h	/^	int operationmode, operationmodeBack, memcelltype, accesstype, transistortype, deviceroadmap;      		$/;"	m	class:Param
treeFoldedRatio	Param.h	/^	double treeFoldedRatio, maxGlobalBusWidth;$/;"	m	class:Param
unitHeight	Bus.h	/^	double unitHeight, unitWidth, wireWidth;$/;"	m	class:Bus
unitHeight	HTree.h	/^	double unitHeight, unitWidth;$/;"	m	class:HTree
unitLatencyRep	Bus.h	/^	double unitLatencyRep, unitLatencyWire, unitLengthLeakage, unitLengthEnergyRep, unitLengthEnergyWire;$/;"	m	class:Bus
unitLatencyRep	HTree.h	/^	double unitLatencyRep, unitLatencyWire, unitLengthLeakage, unitLengthEnergyRep, unitLengthEnergyWire;$/;"	m	class:HTree
unitLatencyWire	Bus.h	/^	double unitLatencyRep, unitLatencyWire, unitLengthLeakage, unitLengthEnergyRep, unitLengthEnergyWire;$/;"	m	class:Bus
unitLatencyWire	HTree.h	/^	double unitLatencyRep, unitLatencyWire, unitLengthLeakage, unitLengthEnergyRep, unitLengthEnergyWire;$/;"	m	class:HTree
unitLengthEnergyRep	Bus.h	/^	double unitLatencyRep, unitLatencyWire, unitLengthLeakage, unitLengthEnergyRep, unitLengthEnergyWire;$/;"	m	class:Bus
unitLengthEnergyRep	HTree.h	/^	double unitLatencyRep, unitLatencyWire, unitLengthLeakage, unitLengthEnergyRep, unitLengthEnergyWire;$/;"	m	class:HTree
unitLengthEnergyWire	Bus.h	/^	double unitLatencyRep, unitLatencyWire, unitLengthLeakage, unitLengthEnergyRep, unitLengthEnergyWire;$/;"	m	class:Bus
unitLengthEnergyWire	HTree.h	/^	double unitLatencyRep, unitLatencyWire, unitLengthLeakage, unitLengthEnergyRep, unitLengthEnergyWire;$/;"	m	class:HTree
unitLengthLeakage	Bus.h	/^	double unitLatencyRep, unitLatencyWire, unitLengthLeakage, unitLengthEnergyRep, unitLengthEnergyWire;$/;"	m	class:Bus
unitLengthLeakage	HTree.h	/^	double unitLatencyRep, unitLatencyWire, unitLengthLeakage, unitLengthEnergyRep, unitLengthEnergyWire;$/;"	m	class:HTree
unitLengthWireCap	Bus.h	/^	double busWidth, delaytolerance, unitLengthWireCap, wireLength;$/;"	m	class:Bus
unitLengthWireCap	HTree.h	/^	double busWidth, delaytolerance, unitLengthWireCap, totalWireLength;$/;"	m	class:HTree
unitLengthWireResistance	Bus.h	/^	double AR, Rho, unitLengthWireResistance, minDist, minDelay, resOnRep;$/;"	m	class:Bus
unitLengthWireResistance	HTree.h	/^	double numStage, numTree, AR, Rho, unitLengthWireResistance, minDist, minDelay, resOnRep;$/;"	m	class:HTree
unitLengthWireResistance	Param.h	/^	double AR, Rho, wireLengthRow, wireLengthCol, unitLengthWireResistance, wireResistanceRow, wireResistanceCol;$/;"	m	class:Param
unitWidth	Bus.h	/^	double unitHeight, unitWidth, wireWidth;$/;"	m	class:Bus
unitWidth	HTree.h	/^	double unitHeight, unitWidth;$/;"	m	class:HTree
unitWireRes	Buffer.h	/^	double unitWireRes, clkFreq, lengthRow, lengthCol, memoryArea, hDff, wDff, colDelay;$/;"	m	class:Buffer
unitWireRes	SubArray.h	/^	double unitWireRes;	\/\/ Unit wire resistance, Unit ohm\/m$/;"	m	class:SubArray
usedArea	FunctionUnit.h	/^	double usedArea;		\/* Unit: m^2 *\/$/;"	m	class:FunctionUnit
validated	Param.h	/^	bool globalBufferType, tileBufferType, peBufferType, chipActivation, reLu, novelMapping, pipeline, SARADC, currentMode, validated, synchronous;$/;"	m	class:Param
validated	SubArray.h	/^	bool validated;$/;"	m	class:SubArray
vdd	Technology.h	/^	double vdd;			\/* Supply voltage, Unit: V *\/$/;"	m	class:Technology
voltageIntThreshold	ReadCircuit.h	/^	double voltageIntThreshold;$/;"	m	class:ReadCircuit
voltageSenseAmp	Sigmoid.h	/^	VoltageSenseAmp voltageSenseAmp;$/;"	m	class:Sigmoid
voltageSenseDiff	VoltageSenseAmp.h	/^	double voltageSenseDiff;$/;"	m	class:VoltageSenseAmp
vth	Technology.h	/^	double vth;				\/* Threshold voltage, Unit: V *\/$/;"	m	class:Technology
wAdder	Adder.h	/^	double hAdder, wAdder;$/;"	m	class:Adder
wDff	Buffer.h	/^	double unitWireRes, clkFreq, lengthRow, lengthCol, memoryArea, hDff, wDff, colDelay;$/;"	m	class:Buffer
wDff	DFF.h	/^	double hDff, wDff;$/;"	m	class:DFF
wDff	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit
wDffInv	Buffer.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP, hDffInv, wDffInv;$/;"	m	class:Buffer
wInv	Bus.h	/^	double widthInvN, widthInvP, wInv, hInv, capInvInput, capInvOutput;$/;"	m	class:Bus
wInv	HTree.h	/^	double widthInvN, widthInvP, wInv, hInv, capInvInput, capInvOutput;$/;"	m	class:HTree
wMinInv	Bus.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:Bus
wMinInv	HTree.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:HTree
wNmosL	CurrentSenseAmp.h	/^	double hNmosL, wNmosL, hNmosS, wNmosS, hNmosM, wNmosM;$/;"	m	class:CurrentSenseAmp
wNmosM	CurrentSenseAmp.h	/^	double hNmosL, wNmosL, hNmosS, wNmosS, hNmosM, wNmosM;$/;"	m	class:CurrentSenseAmp
wNmosS	CurrentSenseAmp.h	/^	double hNmosL, wNmosL, hNmosS, wNmosS, hNmosM, wNmosM;$/;"	m	class:CurrentSenseAmp
wReadBody	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit
wRep	Bus.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:Bus
wRep	HTree.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:HTree
wUnit	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit
wUnit	Sigmoid.h	/^	double hUnit, wUnit, areaUnit;$/;"	m	class:Sigmoid
width	FunctionUnit.h	/^	double width;		\/* Unit: m *\/$/;"	m	class:FunctionUnit
widthAccessCMOS	MemCell.h	/^	double widthAccessCMOS;	\/* The gate width of CMOS access transistor, Unit: F *\/$/;"	m	class:MemCell
widthAccessCMOS	Param.h	/^	double heightInFeatureSizeSRAM, widthInFeatureSizeSRAM, widthSRAMCellNMOS, widthSRAMCellPMOS, widthAccessCMOS, minSenseVoltage;$/;"	m	class:Param
widthArray	CurrentSenseAmp.h	/^	double widthArray;$/;"	m	class:CurrentSenseAmp
widthArray	SubArray.h	/^	double widthArray;$/;"	m	class:SubArray
widthDffInvN	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:ReadCircuit
widthDffInvP	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:ReadCircuit
widthDffNorN	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:ReadCircuit
widthDffNorP	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:ReadCircuit
widthDffTgN	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:ReadCircuit
widthDffTgP	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:ReadCircuit
widthDriverInvN	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, widthDriverInvP;$/;"	m	class:RowDecoder
widthDriverInvP	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, widthDriverInvP;$/;"	m	class:RowDecoder
widthEnInvN	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widthMuxInvP;$/;"	m	class:Mux
widthEnInvP	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widthMuxInvP;$/;"	m	class:Mux
widthFin	Technology.h	/^	double widthFin;	\/* Fin width, Unit: m *\/$/;"	m	class:Technology
widthInFeatureSize	MemCell.h	/^	double widthInFeatureSize;	\/* Cell width, Unit: F *\/$/;"	m	class:MemCell
widthInFeatureSize1T1R	Param.h	/^	double heightInFeatureSize1T1R, widthInFeatureSize1T1R, heightInFeatureSizeCrossbar, widthInFeatureSizeCrossbar;$/;"	m	class:Param
widthInFeatureSizeCrossbar	Param.h	/^	double heightInFeatureSize1T1R, widthInFeatureSize1T1R, heightInFeatureSizeCrossbar, widthInFeatureSizeCrossbar;$/;"	m	class:Param
widthInFeatureSizeSRAM	Param.h	/^	double heightInFeatureSizeSRAM, widthInFeatureSizeSRAM, widthSRAMCellNMOS, widthSRAMCellPMOS, widthAccessCMOS, minSenseVoltage;$/;"	m	class:Param
widthInvN	Buffer.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP, hDffInv, wDffInv;$/;"	m	class:Buffer
widthInvN	Bus.h	/^	double widthInvN, widthInvP, wInv, hInv, capInvInput, capInvOutput;$/;"	m	class:Bus
widthInvN	Comparator.h	/^	double widthInvN, widthInvP, widthNand2N, widthNand2P, widthNand3N, widthNand3P;$/;"	m	class:Comparator
widthInvN	DFF.h	/^	double widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:DFF
widthInvN	DeMux.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DeMux
widthInvN	DecoderDriver.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DecoderDriver
widthInvN	HTree.h	/^	double widthInvN, widthInvP, wInv, hInv, capInvInput, capInvOutput;$/;"	m	class:HTree
widthInvN	MaxPooling.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthNorN2, widthNorP2;$/;"	m	class:MaxPooling
widthInvN	MultilevelSAEncoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:MultilevelSAEncoder
widthInvN	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:ReadCircuit
widthInvN	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, widthDriverInvP;$/;"	m	class:RowDecoder
widthInvN	SRAMWriteDriver.h	/^	double widthInvN, widthInvP;$/;"	m	class:SRAMWriteDriver
widthInvN	ShiftAdd.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:ShiftAdd
widthInvN	Sigmoid.h	/^	double widthInvN, widthInvP;$/;"	m	class:Sigmoid
widthInvN	WLDecoderOutput.h	/^	double widthNorN, widthNorP, widthInvN, widthInvP, widthTgN, widthTgP, widthNmos;$/;"	m	class:WLDecoderOutput
widthInvN	WLNewDecoderDriver.h	/^	double widthNandN, widthNandP, widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:WLNewDecoderDriver
widthInvP	Buffer.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP, hDffInv, wDffInv;$/;"	m	class:Buffer
widthInvP	Bus.h	/^	double widthInvN, widthInvP, wInv, hInv, capInvInput, capInvOutput;$/;"	m	class:Bus
widthInvP	Comparator.h	/^	double widthInvN, widthInvP, widthNand2N, widthNand2P, widthNand3N, widthNand3P;$/;"	m	class:Comparator
widthInvP	DFF.h	/^	double widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:DFF
widthInvP	DeMux.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DeMux
widthInvP	DecoderDriver.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DecoderDriver
widthInvP	HTree.h	/^	double widthInvN, widthInvP, wInv, hInv, capInvInput, capInvOutput;$/;"	m	class:HTree
widthInvP	MaxPooling.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthNorN2, widthNorP2;$/;"	m	class:MaxPooling
widthInvP	MultilevelSAEncoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:MultilevelSAEncoder
widthInvP	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:ReadCircuit
widthInvP	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, widthDriverInvP;$/;"	m	class:RowDecoder
widthInvP	SRAMWriteDriver.h	/^	double widthInvN, widthInvP;$/;"	m	class:SRAMWriteDriver
widthInvP	ShiftAdd.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:ShiftAdd
widthInvP	Sigmoid.h	/^	double widthInvN, widthInvP;$/;"	m	class:Sigmoid
widthInvP	WLDecoderOutput.h	/^	double widthNorN, widthNorP, widthInvN, widthInvP, widthTgN, widthTgP, widthNmos;$/;"	m	class:WLDecoderOutput
widthInvP	WLNewDecoderDriver.h	/^	double widthNandN, widthNandP, widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:WLNewDecoderDriver
widthMinInvN	Bus.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:Bus
widthMinInvN	HTree.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:HTree
widthMinInvP	Bus.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:Bus
widthMinInvP	HTree.h	/^	double widthMinInvN, widthMinInvP, wMinInv, hMinInv, capMinInvInput, capMinInvOutput, wRep, hRep, capRepInput, capRepOutput;$/;"	m	class:HTree
widthMuxInvN	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widthMuxInvP;$/;"	m	class:Mux
widthMuxInvP	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widthMuxInvP;$/;"	m	class:Mux
widthN	LevelShifter.h	/^	double widthN,widthP;$/;"	m	class:LevelShifter
widthNand2N	Comparator.h	/^	double widthInvN, widthInvP, widthNand2N, widthNand2P, widthNand3N, widthNand3P;$/;"	m	class:Comparator
widthNand2P	Comparator.h	/^	double widthInvN, widthInvP, widthNand2N, widthNand2P, widthNand3N, widthNand3P;$/;"	m	class:Comparator
widthNand3N	Comparator.h	/^	double widthInvN, widthInvP, widthNand2N, widthNand2P, widthNand3N, widthNand3P;$/;"	m	class:Comparator
widthNand3P	Comparator.h	/^	double widthInvN, widthInvP, widthNand2N, widthNand2P, widthNand3N, widthNand3P;$/;"	m	class:Comparator
widthNandN	Adder.h	/^	double widthNandN, widthNandP;$/;"	m	class:Adder
widthNandN	MaxPooling.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthNorN2, widthNorP2;$/;"	m	class:MaxPooling
widthNandN	MultilevelSAEncoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:MultilevelSAEncoder
widthNandN	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widthMuxInvP;$/;"	m	class:Mux
widthNandN	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, widthDriverInvP;$/;"	m	class:RowDecoder
widthNandN	ShiftAdd.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:ShiftAdd
widthNandN	WLNewDecoderDriver.h	/^	double widthNandN, widthNandP, widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:WLNewDecoderDriver
widthNandP	Adder.h	/^	double widthNandN, widthNandP;$/;"	m	class:Adder
widthNandP	MaxPooling.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthNorN2, widthNorP2;$/;"	m	class:MaxPooling
widthNandP	MultilevelSAEncoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:MultilevelSAEncoder
widthNandP	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widthMuxInvP;$/;"	m	class:Mux
widthNandP	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, widthDriverInvP;$/;"	m	class:RowDecoder
widthNandP	ShiftAdd.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:ShiftAdd
widthNandP	WLNewDecoderDriver.h	/^	double widthNandN, widthNandP, widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:WLNewDecoderDriver
widthNmos	CurrentSenseAmp.h	/^	double widthNmos, widthPmos;$/;"	m	class:CurrentSenseAmp
widthNmos	MultilevelSenseAmp.h	/^	double widthNmos, widthPmos;$/;"	m	class:MultilevelSenseAmp
widthNmos	SarADC.h	/^	double widthNmos, widthPmos;$/;"	m	class:SarADC
widthNmos	VoltageSenseAmp.h	/^	double widthNmos, widthPmos;$/;"	m	class:VoltageSenseAmp
widthNmos	WLDecoderOutput.h	/^	double widthNorN, widthNorP, widthInvN, widthInvP, widthTgN, widthTgP, widthNmos;$/;"	m	class:WLDecoderOutput
widthNmos1	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widthNmos5, widthPmos5, widthNmos6, widthNmos7, widthNmos8, widthPmos8;$/;"	m	class:ReadCircuit
widthNmos2	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widthNmos5, widthPmos5, widthNmos6, widthNmos7, widthNmos8, widthPmos8;$/;"	m	class:ReadCircuit
widthNmos3	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widthNmos5, widthPmos5, widthNmos6, widthNmos7, widthNmos8, widthPmos8;$/;"	m	class:ReadCircuit
widthNmos4	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widthNmos5, widthPmos5, widthNmos6, widthNmos7, widthNmos8, widthPmos8;$/;"	m	class:ReadCircuit
widthNmos5	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widthNmos5, widthPmos5, widthNmos6, widthNmos7, widthNmos8, widthPmos8;$/;"	m	class:ReadCircuit
widthNmos6	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widthNmos5, widthPmos5, widthNmos6, widthNmos7, widthNmos8, widthPmos8;$/;"	m	class:ReadCircuit
widthNmos7	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widthNmos5, widthPmos5, widthNmos6, widthNmos7, widthNmos8, widthPmos8;$/;"	m	class:ReadCircuit
widthNmos8	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widthNmos5, widthPmos5, widthNmos6, widthNmos7, widthNmos8, widthPmos8;$/;"	m	class:ReadCircuit
widthNorN	MaxPooling.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthNorN2, widthNorP2;$/;"	m	class:MaxPooling
widthNorN	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, widthDriverInvP;$/;"	m	class:RowDecoder
widthNorN	WLDecoderOutput.h	/^	double widthNorN, widthNorP, widthInvN, widthInvP, widthTgN, widthTgP, widthNmos;$/;"	m	class:WLDecoderOutput
widthNorN2	MaxPooling.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthNorN2, widthNorP2;$/;"	m	class:MaxPooling
widthNorP	MaxPooling.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthNorN2, widthNorP2;$/;"	m	class:MaxPooling
widthNorP	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, widthDriverInvP;$/;"	m	class:RowDecoder
widthNorP	WLDecoderOutput.h	/^	double widthNorN, widthNorP, widthInvN, widthInvP, widthTgN, widthTgP, widthNmos;$/;"	m	class:WLDecoderOutput
widthNorP2	MaxPooling.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthNorN2, widthNorP2;$/;"	m	class:MaxPooling
widthP	LevelShifter.h	/^	double widthN,widthP;$/;"	m	class:LevelShifter
widthPMOSBitlineEqual	Precharger.h	/^	double widthPMOSBitlinePrecharger, widthPMOSBitlineEqual;$/;"	m	class:Precharger
widthPMOSBitlinePrecharger	Precharger.h	/^	double widthPMOSBitlinePrecharger, widthPMOSBitlineEqual;$/;"	m	class:Precharger
widthPmos	CurrentSenseAmp.h	/^	double widthNmos, widthPmos;$/;"	m	class:CurrentSenseAmp
widthPmos	MultilevelSenseAmp.h	/^	double widthNmos, widthPmos;$/;"	m	class:MultilevelSenseAmp
widthPmos	SarADC.h	/^	double widthNmos, widthPmos;$/;"	m	class:SarADC
widthPmos	VoltageSenseAmp.h	/^	double widthNmos, widthPmos;$/;"	m	class:VoltageSenseAmp
widthPmos1	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widthNmos5, widthPmos5, widthNmos6, widthNmos7, widthNmos8, widthPmos8;$/;"	m	class:ReadCircuit
widthPmos3	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widthNmos5, widthPmos5, widthNmos6, widthNmos7, widthNmos8, widthPmos8;$/;"	m	class:ReadCircuit
widthPmos4	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widthNmos5, widthPmos5, widthNmos6, widthNmos7, widthNmos8, widthPmos8;$/;"	m	class:ReadCircuit
widthPmos5	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widthNmos5, widthPmos5, widthNmos6, widthNmos7, widthNmos8, widthPmos8;$/;"	m	class:ReadCircuit
widthPmos8	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widthNmos5, widthPmos5, widthNmos6, widthNmos7, widthNmos8, widthPmos8;$/;"	m	class:ReadCircuit
widthSRAMCellNMOS	MemCell.h	/^	double widthSRAMCellNMOS;	\/* The gate width of NMOS in SRAM cells, Unit: F *\/$/;"	m	class:MemCell
widthSRAMCellNMOS	Param.h	/^	double heightInFeatureSizeSRAM, widthInFeatureSizeSRAM, widthSRAMCellNMOS, widthSRAMCellPMOS, widthAccessCMOS, minSenseVoltage;$/;"	m	class:Param
widthSRAMCellPMOS	MemCell.h	/^	double widthSRAMCellPMOS;	\/* The gate width of PMOS in SRAM cells, Unit: F *\/$/;"	m	class:MemCell
widthSRAMCellPMOS	Param.h	/^	double heightInFeatureSizeSRAM, widthInFeatureSizeSRAM, widthSRAMCellNMOS, widthSRAMCellPMOS, widthAccessCMOS, minSenseVoltage;$/;"	m	class:Param
widthTgN	Buffer.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP, hDffInv, wDffInv;$/;"	m	class:Buffer
widthTgN	DFF.h	/^	double widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:DFF
widthTgN	DeMux.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DeMux
widthTgN	DecoderDriver.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DecoderDriver
widthTgN	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widthMuxInvP;$/;"	m	class:Mux
widthTgN	NewMux.h	/^	double widthTgN, widthTgP;$/;"	m	class:NewMux
widthTgN	NewSwitchMatrix.h	/^	double widthTgN, widthTgP;$/;"	m	class:NewSwitchMatrix
widthTgN	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:ReadCircuit
widthTgN	SwitchMatrix.h	/^	double widthTgN, widthTgP;$/;"	m	class:SwitchMatrix
widthTgN	WLDecoderOutput.h	/^	double widthNorN, widthNorP, widthInvN, widthInvP, widthTgN, widthTgP, widthNmos;$/;"	m	class:WLDecoderOutput
widthTgN	WLNewDecoderDriver.h	/^	double widthNandN, widthNandP, widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:WLNewDecoderDriver
widthTgP	Buffer.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP, hDffInv, wDffInv;$/;"	m	class:Buffer
widthTgP	DFF.h	/^	double widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:DFF
widthTgP	DeMux.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DeMux
widthTgP	DecoderDriver.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DecoderDriver
widthTgP	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widthMuxInvP;$/;"	m	class:Mux
widthTgP	NewMux.h	/^	double widthTgN, widthTgP;$/;"	m	class:NewMux
widthTgP	NewSwitchMatrix.h	/^	double widthTgN, widthTgP;$/;"	m	class:NewSwitchMatrix
widthTgP	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:ReadCircuit
widthTgP	SwitchMatrix.h	/^	double widthTgN, widthTgP;$/;"	m	class:SwitchMatrix
widthTgP	WLDecoderOutput.h	/^	double widthNorN, widthNorP, widthInvN, widthInvP, widthTgN, widthTgP, widthNmos;$/;"	m	class:WLDecoderOutput
widthTgP	WLNewDecoderDriver.h	/^	double widthNandN, widthNandP, widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:WLNewDecoderDriver
widthTgShared	Mux.h	/^	double widthTgShared;$/;"	m	class:Mux
widthVoltageSenseAmp	VoltageSenseAmp.h	/^	double widthVoltageSenseAmp;$/;"	m	class:VoltageSenseAmp
window	MaxPooling.h	/^	int numBit, window, numMaxPooling, numStage;$/;"	m	class:MaxPooling
wireLength	Bus.h	/^	double busWidth, delaytolerance, unitLengthWireCap, wireLength;$/;"	m	class:Bus
wireLengthCol	Param.h	/^	double AR, Rho, wireLengthRow, wireLengthCol, unitLengthWireResistance, wireResistanceRow, wireResistanceCol;$/;"	m	class:Param
wireLengthRow	Param.h	/^	double AR, Rho, wireLengthRow, wireLengthCol, unitLengthWireResistance, wireResistanceRow, wireResistanceCol;$/;"	m	class:Param
wireResistanceCol	Param.h	/^	double AR, Rho, wireLengthRow, wireLengthCol, unitLengthWireResistance, wireResistanceRow, wireResistanceCol;$/;"	m	class:Param
wireResistanceRow	Param.h	/^	double AR, Rho, wireLengthRow, wireLengthCol, unitLengthWireResistance, wireResistanceRow, wireResistanceCol;$/;"	m	class:Param
wireWidth	Bus.h	/^	double unitHeight, unitWidth, wireWidth;$/;"	m	class:Bus
wireWidth	Param.h	/^	int temp, technode, wireWidth, multipleCells;$/;"	m	class:Param
wlDecoder	Buffer.h	/^	RowDecoder  wlDecoder;$/;"	m	class:Buffer
wlDecoder	Sigmoid.h	/^	RowDecoder wlDecoder;$/;"	m	class:Sigmoid
wlDecoder	SubArray.h	/^	RowDecoder               wlDecoder;$/;"	m	class:SubArray
wlDecoderDriver	SubArray.h	/^	DecoderDriver            wlDecoderDriver;$/;"	m	class:SubArray
wlDecoderOutput	SubArray.h	/^	WLDecoderOutput          wlDecoderOutput;$/;"	m	class:SubArray
wlNewDecoderDriver	SubArray.h	/^	WLNewDecoderDriver       wlNewDecoderDriver;$/;"	m	class:SubArray
wlNewSwitchMatrix	SubArray.h	/^	NewSwitchMatrix          wlNewSwitchMatrix;$/;"	m	class:SubArray
wlSwitchMatrix	SubArray.h	/^	SwitchMatrix             wlSwitchMatrix;$/;"	m	class:SubArray
wllevelshifter	SubArray.h	/^	LevelShifter			 wllevelshifter;$/;"	m	class:SubArray
writeDynamicEnergy	FunctionUnit.h	/^	double readDynamicEnergy, writeDynamicEnergy;	\/* Unit: J *\/$/;"	m	class:FunctionUnit
writeDynamicEnergyArray	SubArray.h	/^	double readDynamicEnergyArray, writeDynamicEnergyArray;$/;"	m	class:SubArray
writeLatency	FunctionUnit.h	/^	double readLatency, writeLatency;		\/* Unit: s *\/$/;"	m	class:FunctionUnit
writeLatencyArray	SubArray.h	/^	double writeLatencyArray;$/;"	m	class:SubArray
writePower	FunctionUnit.h	/^	double readPower, writePower;$/;"	m	class:FunctionUnit
writePulseWidth	MemCell.h	/^	double writePulseWidth;$/;"	m	class:MemCell
writePulseWidth	Param.h	/^	double writePulseWidth, numWritePulse;$/;"	m	class:Param
writeVoltage	MemCell.h	/^	double writeVoltage;$/;"	m	class:MemCell
writeVoltage	Param.h	/^	double maxNumLevelLTP, maxNumLevelLTD, readVoltage, readPulseWidth, writeVoltage;$/;"	m	class:Param
writeWholeDynamicEnergy	Buffer.h	/^	double dffDynamicEnergy, readWholeDynamicEnergy, writeWholeDynamicEnergy, avgBitReadDynamicEnergy, avgBitWriteDynamicEnergy;$/;"	m	class:Buffer
writeWholeLatency	Buffer.h	/^	double readWholeLatency, writeWholeLatency, avgBitReadLatency, avgBitWriteLatency;$/;"	m	class:Buffer
x_center	HTree.h	/^	int x_center, y_center, hit, skipVer;$/;"	m	class:HTree
y_center	HTree.h	/^	int x_center, y_center, hit, skipVer;$/;"	m	class:HTree
zeta	Param.h	/^	double alpha, beta, gamma, delta, epsilon, zeta;$/;"	m	class:Param
~Adder	Adder.h	/^	virtual ~Adder() {}$/;"	f	class:Adder
~AdderTree	AdderTree.h	/^	virtual ~AdderTree() {}$/;"	f	class:AdderTree
~BitShifter	BitShifter.h	/^	virtual ~BitShifter() {}$/;"	f	class:BitShifter
~Buffer	Buffer.h	/^	virtual ~Buffer() {}$/;"	f	class:Buffer
~Bus	Bus.h	/^	virtual ~Bus() {}$/;"	f	class:Bus
~Comparator	Comparator.h	/^	virtual ~Comparator() {}$/;"	f	class:Comparator
~CurrentSenseAmp	CurrentSenseAmp.cpp	/^CurrentSenseAmp::~CurrentSenseAmp() {$/;"	f	class:CurrentSenseAmp
~DFF	DFF.h	/^	virtual ~DFF() {}$/;"	f	class:DFF
~DeMux	DeMux.h	/^	virtual ~DeMux() {}$/;"	f	class:DeMux
~DecoderDriver	DecoderDriver.h	/^	virtual ~DecoderDriver() {}$/;"	f	class:DecoderDriver
~FunctionUnit	FunctionUnit.h	/^	virtual ~FunctionUnit() {}$/;"	f	class:FunctionUnit
~HTree	HTree.h	/^	virtual ~HTree() {}$/;"	f	class:HTree
~LevelShifter	LevelShifter.cpp	/^LevelShifter::~LevelShifter() {$/;"	f	class:LevelShifter
~MaxPooling	MaxPooling.h	/^	virtual ~MaxPooling() {}$/;"	f	class:MaxPooling
~MultilevelSAEncoder	MultilevelSAEncoder.h	/^	virtual ~MultilevelSAEncoder() {}$/;"	f	class:MultilevelSAEncoder
~MultilevelSenseAmp	MultilevelSenseAmp.h	/^	virtual ~MultilevelSenseAmp() {}$/;"	f	class:MultilevelSenseAmp
~Mux	Mux.h	/^	virtual ~Mux() {}$/;"	f	class:Mux
~NewSwitchMatrix	NewSwitchMatrix.cpp	/^NewSwitchMatrix::~NewSwitchMatrix() {$/;"	f	class:NewSwitchMatrix
~Precharger	Precharger.h	/^	virtual ~Precharger() {}$/;"	f	class:Precharger
~ReadCircuit	ReadCircuit.h	/^	virtual ~ReadCircuit() {}$/;"	f	class:ReadCircuit
~RowDecoder	RowDecoder.h	/^	virtual ~RowDecoder() {}$/;"	f	class:RowDecoder
~SRAMWriteDriver	SRAMWriteDriver.h	/^	virtual ~SRAMWriteDriver() {}$/;"	f	class:SRAMWriteDriver
~SarADC	SarADC.h	/^	virtual ~SarADC() {}$/;"	f	class:SarADC
~SenseAmp	SenseAmp.h	/^	virtual ~SenseAmp() {}$/;"	f	class:SenseAmp
~ShiftAdd	ShiftAdd.h	/^	virtual ~ShiftAdd() {}$/;"	f	class:ShiftAdd
~Sigmoid	Sigmoid.h	/^	virtual ~Sigmoid() {}$/;"	f	class:Sigmoid
~SramNewSA	SramNewSA.h	/^	virtual ~SramNewSA() {}$/;"	f	class:SramNewSA
~SubArray	SubArray.h	/^	virtual ~SubArray() {}$/;"	f	class:SubArray
~SwitchMatrix	SwitchMatrix.h	/^	virtual ~SwitchMatrix() {}$/;"	f	class:SwitchMatrix
~Technology	Technology.h	/^	virtual ~Technology() {}$/;"	f	class:Technology
~VoltageSenseAmp	VoltageSenseAmp.h	/^	virtual ~VoltageSenseAmp() {}$/;"	f	class:VoltageSenseAmp
~WLDecoderOutput	WLDecoderOutput.h	/^	virtual ~WLDecoderOutput() {}$/;"	f	class:WLDecoderOutput
~WLNewDecoderDriver	WLNewDecoderDriver.cpp	/^WLNewDecoderDriver::~WLNewDecoderDriver() {$/;"	f	class:WLNewDecoderDriver
